
RTOS_Led_Button_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003880  08003880  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003880  08003880  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003880  08003880  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000173bc  20000018  080038a0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200173d4  080038a0  000273d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de23  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e95  00000000  00000000  0002de6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000132b5  00000000  00000000  00031318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a26b  00000000  00000000  000445cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007244d  00000000  00000000  0004e838  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0c85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000c0d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003760 	.word	0x08003760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08003760 	.word	0x08003760

080001d0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <NVIC_EnableIRQ+0x30>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	da0b      	bge.n	8000230 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <NVIC_SetPriority+0x4c>)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	f003 030f 	and.w	r3, r3, #15
 8000224:	3b04      	subs	r3, #4
 8000226:	0112      	lsls	r2, r2, #4
 8000228:	b2d2      	uxtb	r2, r2
 800022a:	440b      	add	r3, r1
 800022c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022e:	e009      	b.n	8000244 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	b2da      	uxtb	r2, r3
 8000234:	4907      	ldr	r1, [pc, #28]	; (8000254 <NVIC_SetPriority+0x50>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	440b      	add	r3, r1
 8000240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00
 8000254:	e000e100 	.word	0xe000e100

08000258 <main>:
void button_handler(void *params);

uint8_t button_status_flag = NOT_PRESSED;

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af02      	add	r7, sp, #8
	RCC_DeInit();
 800025e:	f000 fb27 	bl	80008b0 <RCC_DeInit>

	SystemCoreClockUpdate();
 8000262:	f000 f90f 	bl	8000484 <SystemCoreClockUpdate>

	prvSetupHardware();
 8000266:	f000 f8ef 	bl	8000448 <prvSetupHardware>

	SEGGER_SYSVIEW_Conf();
 800026a:	f001 fe77 	bl	8001f5c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800026e:	f002 fccd 	bl	8002c0c <SEGGER_SYSVIEW_Start>

	xTaskCreate(led_task_handler, "LED-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000272:	2300      	movs	r3, #0
 8000274:	9301      	str	r3, [sp, #4]
 8000276:	2301      	movs	r3, #1
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	2300      	movs	r3, #0
 800027c:	2282      	movs	r2, #130	; 0x82
 800027e:	4903      	ldr	r1, [pc, #12]	; (800028c <main+0x34>)
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <main+0x38>)
 8000282:	f000 fdec 	bl	8000e5e <xTaskCreate>

	vTaskStartScheduler();
 8000286:	f000 ff4b 	bl	8001120 <vTaskStartScheduler>

	for(;;);
 800028a:	e7fe      	b.n	800028a <main+0x32>
 800028c:	08003778 	.word	0x08003778
 8000290:	08000295 	.word	0x08000295

08000294 <led_task_handler>:

}

void led_task_handler(void *params)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(button_status_flag == PRESSED)
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <led_task_handler+0x2c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d106      	bne.n	80002b2 <led_task_handler+0x1e>
		{
			GPIO_WriteBit(GPIOD, GPIO_Pin_15, Bit_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <led_task_handler+0x30>)
 80002ac:	f000 fa9e 	bl	80007ec <GPIO_WriteBit>
 80002b0:	e7f4      	b.n	800029c <led_task_handler+0x8>
		}
		else
		{
			GPIO_WriteBit(GPIOD, GPIO_Pin_15, Bit_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <led_task_handler+0x30>)
 80002ba:	f000 fa97 	bl	80007ec <GPIO_WriteBit>
		if(button_status_flag == PRESSED)
 80002be:	e7ed      	b.n	800029c <led_task_handler+0x8>
 80002c0:	20000034 	.word	0x20000034
 80002c4:	40020c00 	.word	0x40020c00

080002c8 <button_handler>:
		}
	}
}

void button_handler(void *params)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	button_status_flag ^= 1;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <button_handler+0x24>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f083 0301 	eor.w	r3, r3, #1
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <button_handler+0x24>)
 80002dc:	701a      	strb	r2, [r3, #0]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000034 	.word	0x20000034

080002f0 <prvSetupUart>:

static void prvSetupUart(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_UART_Pin;
	USART_InitTypeDef UART2_Init;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80002f6:	2101      	movs	r1, #1
 80002f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002fc:	f000 fbd8 	bl	8000ab0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000300:	2101      	movs	r1, #1
 8000302:	2001      	movs	r0, #1
 8000304:	f000 fbb4 	bl	8000a70 <RCC_AHB1PeriphClockCmd>

	memset(&GPIO_UART_Pin, 0, sizeof(GPIO_UART_Pin));
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	2208      	movs	r2, #8
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f003 fa1d 	bl	8003750 <memset>

	GPIO_UART_Pin.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000316:	230c      	movs	r3, #12
 8000318:	613b      	str	r3, [r7, #16]
	GPIO_UART_Pin.GPIO_Mode = GPIO_Mode_AF;
 800031a:	2302      	movs	r3, #2
 800031c:	753b      	strb	r3, [r7, #20]
	GPIO_UART_Pin.GPIO_PuPd = GPIO_PuPd_UP;
 800031e:	2301      	movs	r3, #1
 8000320:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_UART_Pin);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4619      	mov	r1, r3
 8000328:	4816      	ldr	r0, [pc, #88]	; (8000384 <prvSetupUart+0x94>)
 800032a:	f000 f9d1 	bl	80006d0 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 800032e:	2207      	movs	r2, #7
 8000330:	2102      	movs	r1, #2
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <prvSetupUart+0x94>)
 8000334:	f000 fa72 	bl	800081c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000338:	2207      	movs	r2, #7
 800033a:	2103      	movs	r1, #3
 800033c:	4811      	ldr	r0, [pc, #68]	; (8000384 <prvSetupUart+0x94>)
 800033e:	f000 fa6d 	bl	800081c <GPIO_PinAFConfig>

	memset(&UART2_Init, 0, sizeof(UART2_Init));
 8000342:	463b      	mov	r3, r7
 8000344:	2210      	movs	r2, #16
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f003 fa01 	bl	8003750 <memset>

	UART2_Init.USART_BaudRate = 115200;
 800034e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000352:	603b      	str	r3, [r7, #0]
	UART2_Init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000354:	2300      	movs	r3, #0
 8000356:	81bb      	strh	r3, [r7, #12]
	UART2_Init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000358:	230c      	movs	r3, #12
 800035a:	817b      	strh	r3, [r7, #10]
	UART2_Init.USART_Parity = USART_Parity_No;
 800035c:	2300      	movs	r3, #0
 800035e:	813b      	strh	r3, [r7, #8]
	UART2_Init.USART_StopBits = USART_StopBits_1;
 8000360:	2300      	movs	r3, #0
 8000362:	80fb      	strh	r3, [r7, #6]
	UART2_Init.USART_WordLength = USART_WordLength_8b;
 8000364:	2300      	movs	r3, #0
 8000366:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART2, &UART2_Init);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4806      	ldr	r0, [pc, #24]	; (8000388 <prvSetupUart+0x98>)
 800036e:	f000 fc21 	bl	8000bb4 <USART_Init>

	USART_Cmd(USART2, ENABLE);
 8000372:	2101      	movs	r1, #1
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <prvSetupUart+0x98>)
 8000376:	f000 fcd7 	bl	8000d28 <USART_Cmd>
}
 800037a:	bf00      	nop
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020000 	.word	0x40020000
 8000388:	40004400 	.word	0x40004400

0800038c <prvSetupGPIO>:

void prvSetupGPIO(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000392:	2101      	movs	r1, #1
 8000394:	2008      	movs	r0, #8
 8000396:	f000 fb6b 	bl	8000a70 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800039a:	2101      	movs	r1, #1
 800039c:	2001      	movs	r0, #1
 800039e:	f000 fb67 	bl	8000a70 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80003a2:	2101      	movs	r1, #1
 80003a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80003a8:	f000 fba2 	bl	8000af0 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef LedInit, ButtonInit;
	LedInit.GPIO_Mode = GPIO_Mode_OUT;
 80003ac:	2301      	movs	r3, #1
 80003ae:	753b      	strb	r3, [r7, #20]
	LedInit.GPIO_OType = GPIO_OType_PP;
 80003b0:	2300      	movs	r3, #0
 80003b2:	75bb      	strb	r3, [r7, #22]
	LedInit.GPIO_Pin = GPIO_Pin_15;
 80003b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b8:	613b      	str	r3, [r7, #16]
	LedInit.GPIO_Speed = GPIO_Low_Speed;
 80003ba:	2300      	movs	r3, #0
 80003bc:	757b      	strb	r3, [r7, #21]
	LedInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOD, &LedInit);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <prvSetupGPIO+0x98>)
 80003ca:	f000 f981 	bl	80006d0 <GPIO_Init>

	ButtonInit.GPIO_Mode = GPIO_Mode_IN;
 80003ce:	2300      	movs	r3, #0
 80003d0:	733b      	strb	r3, [r7, #12]
	ButtonInit.GPIO_OType = GPIO_OType_PP;
 80003d2:	2300      	movs	r3, #0
 80003d4:	73bb      	strb	r3, [r7, #14]
	ButtonInit.GPIO_Pin = GPIO_Pin_0;
 80003d6:	2301      	movs	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
	ButtonInit.GPIO_Speed = GPIO_Low_Speed;
 80003da:	2300      	movs	r3, #0
 80003dc:	737b      	strb	r3, [r7, #13]
	ButtonInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOA, &ButtonInit);
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	4619      	mov	r1, r3
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <prvSetupGPIO+0x9c>)
 80003ea:	f000 f971 	bl	80006d0 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 80003ee:	2100      	movs	r1, #0
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 fb9d 	bl	8000b30 <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef ExtiInit;
	ExtiInit.EXTI_Line = EXTI_Line0;
 80003f6:	2301      	movs	r3, #1
 80003f8:	603b      	str	r3, [r7, #0]
	ExtiInit.EXTI_Mode = EXTI_Mode_Interrupt;
 80003fa:	2300      	movs	r3, #0
 80003fc:	713b      	strb	r3, [r7, #4]
	ExtiInit.EXTI_Trigger = EXTI_Trigger_Falling;
 80003fe:	230c      	movs	r3, #12
 8000400:	717b      	strb	r3, [r7, #5]
	ExtiInit.EXTI_LineCmd = ENABLE;
 8000402:	2301      	movs	r3, #1
 8000404:	71bb      	strb	r3, [r7, #6]

	EXTI_Init(&ExtiInit);
 8000406:	463b      	mov	r3, r7
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f8df 	bl	80005cc <EXTI_Init>

	NVIC_SetPriority(EXTI0_IRQn, 5);
 800040e:	2105      	movs	r1, #5
 8000410:	2006      	movs	r0, #6
 8000412:	f7ff fef7 	bl	8000204 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000416:	2006      	movs	r0, #6
 8000418:	f7ff feda 	bl	80001d0 <NVIC_EnableIRQ>
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40020c00 	.word	0x40020c00
 8000428:	40020000 	.word	0x40020000

0800042c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8000430:	f002 feb6 	bl	80031a0 <SEGGER_SYSVIEW_RecordEnterISR>
	EXTI_ClearITPendingBit(EXTI_Line0);
 8000434:	2001      	movs	r0, #1
 8000436:	f000 f93b 	bl	80006b0 <EXTI_ClearITPendingBit>
	button_handler(NULL);
 800043a:	2000      	movs	r0, #0
 800043c:	f7ff ff44 	bl	80002c8 <button_handler>
	traceISR_EXIT();
 8000440:	f002 fef0 	bl	8003224 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <prvSetupHardware>:

static void prvSetupHardware(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	prvSetupGPIO();
 800044c:	f7ff ff9e 	bl	800038c <prvSetupGPIO>
	prvSetupUart();
 8000450:	f7ff ff4e 	bl	80002f0 <prvSetupUart>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <SystemInit+0x28>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <SystemInit+0x28>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <SystemInit+0x28>)
 800046e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000472:	609a      	str	r2, [r3, #8]
#endif
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	2302      	movs	r3, #2
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	2302      	movs	r3, #2
 800049c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800049e:	4b31      	ldr	r3, [pc, #196]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	f003 030c 	and.w	r3, r3, #12
 80004a6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d007      	beq.n	80004be <SystemCoreClockUpdate+0x3a>
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d009      	beq.n	80004c6 <SystemCoreClockUpdate+0x42>
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d13d      	bne.n	8000532 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <SystemCoreClockUpdate+0xe4>)
 80004b8:	4a2c      	ldr	r2, [pc, #176]	; (800056c <SystemCoreClockUpdate+0xe8>)
 80004ba:	601a      	str	r2, [r3, #0]
      break;
 80004bc:	e03d      	b.n	800053a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <SystemCoreClockUpdate+0xe4>)
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <SystemCoreClockUpdate+0xec>)
 80004c2:	601a      	str	r2, [r3, #0]
      break;
 80004c4:	e039      	b.n	800053a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	0d9b      	lsrs	r3, r3, #22
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004da:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00c      	beq.n	80004fc <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004e2:	4a23      	ldr	r2, [pc, #140]	; (8000570 <SystemCoreClockUpdate+0xec>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ea:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 80004ec:	6852      	ldr	r2, [r2, #4]
 80004ee:	0992      	lsrs	r2, r2, #6
 80004f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004f4:	fb02 f303 	mul.w	r3, r2, r3
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e00b      	b.n	8000514 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <SystemCoreClockUpdate+0xe8>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	fbb2 f3f3 	udiv	r3, r2, r3
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 8000506:	6852      	ldr	r2, [r2, #4]
 8000508:	0992      	lsrs	r2, r2, #6
 800050a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	0c1b      	lsrs	r3, r3, #16
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	3301      	adds	r3, #1
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	fbb2 f3f3 	udiv	r3, r2, r3
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <SystemCoreClockUpdate+0xe4>)
 800052e:	6013      	str	r3, [r2, #0]
      break;
 8000530:	e003      	b.n	800053a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <SystemCoreClockUpdate+0xe4>)
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <SystemCoreClockUpdate+0xe8>)
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <SystemCoreClockUpdate+0xe0>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	091b      	lsrs	r3, r3, #4
 8000540:	f003 030f 	and.w	r3, r3, #15
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <SystemCoreClockUpdate+0xe4>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	fa22 f303 	lsr.w	r3, r2, r3
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <SystemCoreClockUpdate+0xe4>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	371c      	adds	r7, #28
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800
 8000568:	20000000 	.word	0x20000000
 800056c:	00f42400 	.word	0x00f42400
 8000570:	017d7840 	.word	0x017d7840
 8000574:	0800385c 	.word	0x0800385c

08000578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800057c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800057e:	e003      	b.n	8000588 <LoopCopyDataInit>

08000580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000586:	3104      	adds	r1, #4

08000588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800058c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800058e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000590:	d3f6      	bcc.n	8000580 <CopyDataInit>
  ldr  r2, =_sbss
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000594:	e002      	b.n	800059c <LoopFillZerobss>

08000596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000598:	f842 3b04 	str.w	r3, [r2], #4

0800059c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800059e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005a0:	d3f9      	bcc.n	8000596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005a2:	f7ff ff59 	bl	8000458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f003 f895 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005aa:	f7ff fe55 	bl	8000258 <main>
  bx  lr    
 80005ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005b4:	08003888 	.word	0x08003888
  ldr  r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005bc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80005c0:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80005c4:	200173d4 	.word	0x200173d4

080005c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_IRQHandler>
	...

080005cc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80005d8:	4b34      	ldr	r3, [pc, #208]	; (80006ac <EXTI_Init+0xe0>)
 80005da:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	799b      	ldrb	r3, [r3, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d04f      	beq.n	8000684 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80005e4:	4b31      	ldr	r3, [pc, #196]	; (80006ac <EXTI_Init+0xe0>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	43db      	mvns	r3, r3
 80005ee:	492f      	ldr	r1, [pc, #188]	; (80006ac <EXTI_Init+0xe0>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <EXTI_Init+0xe0>)
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	43db      	mvns	r3, r3
 80005fe:	492b      	ldr	r1, [pc, #172]	; (80006ac <EXTI_Init+0xe0>)
 8000600:	4013      	ands	r3, r2
 8000602:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	461a      	mov	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	430a      	orrs	r2, r1
 800061c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <EXTI_Init+0xe0>)
 8000620:	689a      	ldr	r2, [r3, #8]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	43db      	mvns	r3, r3
 8000628:	4920      	ldr	r1, [pc, #128]	; (80006ac <EXTI_Init+0xe0>)
 800062a:	4013      	ands	r3, r2
 800062c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <EXTI_Init+0xe0>)
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	43db      	mvns	r3, r3
 8000638:	491c      	ldr	r1, [pc, #112]	; (80006ac <EXTI_Init+0xe0>)
 800063a:	4013      	ands	r3, r2
 800063c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d10e      	bne.n	8000664 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <EXTI_Init+0xe0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4917      	ldr	r1, [pc, #92]	; (80006ac <EXTI_Init+0xe0>)
 8000650:	4313      	orrs	r3, r2
 8000652:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <EXTI_Init+0xe0>)
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4913      	ldr	r1, [pc, #76]	; (80006ac <EXTI_Init+0xe0>)
 800065e:	4313      	orrs	r3, r2
 8000660:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000662:	e01d      	b.n	80006a0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <EXTI_Init+0xe0>)
 8000666:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	430a      	orrs	r2, r1
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	e00d      	b.n	80006a0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	461a      	mov	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4413      	add	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	43da      	mvns	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	400a      	ands	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40013c00 	.word	0x40013c00

080006b0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <EXTI_ClearITPendingBit+0x1c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6153      	str	r3, [r2, #20]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40013c00 	.word	0x40013c00

080006d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e076      	b.n	80007da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006ec:	2201      	movs	r2, #1
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d165      	bne.n	80007d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	2103      	movs	r1, #3
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	401a      	ands	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	4619      	mov	r1, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	431a      	orrs	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d003      	beq.n	8000746 <GPIO_Init+0x76>
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d12e      	bne.n	80007a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	2103      	movs	r1, #3
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	401a      	ands	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689a      	ldr	r2, [r3, #8]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	4619      	mov	r1, r3
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	431a      	orrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	b29b      	uxth	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	2301      	movs	r3, #1
 8000780:	408b      	lsls	r3, r1
 8000782:	43db      	mvns	r3, r3
 8000784:	401a      	ands	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	7992      	ldrb	r2, [r2, #6]
 8000792:	4611      	mov	r1, r2
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	b292      	uxth	r2, r2
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	b292      	uxth	r2, r2
 800079e:	431a      	orrs	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2103      	movs	r1, #3
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	401a      	ands	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	4619      	mov	r1, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	431a      	orrs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d985      	bls.n	80006ec <GPIO_Init+0x1c>
    }
  }
}
 80007e0:	bf00      	nop
 80007e2:	371c      	adds	r7, #28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
 80007f8:	4613      	mov	r3, r2
 80007fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80007fc:	787b      	ldrb	r3, [r7, #1]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	887a      	ldrh	r2, [r7, #2]
 8000806:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000808:	e002      	b.n	8000810 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	835a      	strh	r2, [r3, #26]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
 8000828:	4613      	mov	r3, r2
 800082a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000834:	787a      	ldrb	r2, [r7, #1]
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000844:	887b      	ldrh	r3, [r7, #2]
 8000846:	08db      	lsrs	r3, r3, #3
 8000848:	b29b      	uxth	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3208      	adds	r2, #8
 8000850:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	210f      	movs	r1, #15
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	8879      	ldrh	r1, [r7, #2]
 8000866:	08c9      	lsrs	r1, r1, #3
 8000868:	b289      	uxth	r1, r1
 800086a:	4608      	mov	r0, r1
 800086c:	ea02 0103 	and.w	r1, r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f100 0208 	add.w	r2, r0, #8
 8000876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	08db      	lsrs	r3, r3, #3
 800087e:	b29b      	uxth	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3208      	adds	r2, #8
 8000886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	4313      	orrs	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	b29b      	uxth	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <RCC_DeInit+0x60>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a15      	ldr	r2, [pc, #84]	; (8000910 <RCC_DeInit+0x60>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <RCC_DeInit+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <RCC_DeInit+0x60>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <RCC_DeInit+0x60>)
 80008cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008d4:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <RCC_DeInit+0x60>)
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <RCC_DeInit+0x64>)
 80008da:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <RCC_DeInit+0x60>)
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <RCC_DeInit+0x68>)
 80008e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <RCC_DeInit+0x60>)
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <RCC_DeInit+0x6c>)
 80008e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <RCC_DeInit+0x60>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <RCC_DeInit+0x60>)
 80008f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <RCC_DeInit+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <RCC_DeInit+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40023800 	.word	0x40023800
 8000914:	24003010 	.word	0x24003010
 8000918:	20003000 	.word	0x20003000
 800091c:	24003000 	.word	0x24003000

08000920 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d007      	beq.n	8000960 <RCC_GetClocksFreq+0x40>
 8000950:	2b08      	cmp	r3, #8
 8000952:	d009      	beq.n	8000968 <RCC_GetClocksFreq+0x48>
 8000954:	2b00      	cmp	r3, #0
 8000956:	d13d      	bne.n	80009d4 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a42      	ldr	r2, [pc, #264]	; (8000a64 <RCC_GetClocksFreq+0x144>)
 800095c:	601a      	str	r2, [r3, #0]
    break;
 800095e:	e03d      	b.n	80009dc <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <RCC_GetClocksFreq+0x148>)
 8000964:	601a      	str	r2, [r3, #0]
    break;
 8000966:	e039      	b.n	80009dc <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	0d9b      	lsrs	r3, r3, #22
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000974:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800097c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00c      	beq.n	800099e <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000984:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <RCC_GetClocksFreq+0x148>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	fbb2 f3f3 	udiv	r3, r2, r3
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 800098e:	6852      	ldr	r2, [r2, #4]
 8000990:	0992      	lsrs	r2, r2, #6
 8000992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e00b      	b.n	80009b6 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <RCC_GetClocksFreq+0x144>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 80009a8:	6852      	ldr	r2, [r2, #4]
 80009aa:	0992      	lsrs	r2, r2, #6
 80009ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	0c1b      	lsrs	r3, r3, #16
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	3301      	adds	r3, #1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
    break;
 80009d2:	e003      	b.n	80009dc <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <RCC_GetClocksFreq+0x144>)
 80009d8:	601a      	str	r2, [r3, #0]
    break;
 80009da:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <RCC_GetClocksFreq+0x14c>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	40da      	lsrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	0a9b      	lsrs	r3, r3, #10
 8000a12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a14:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <RCC_GetClocksFreq+0x14c>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	40da      	lsrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <RCC_GetClocksFreq+0x140>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a34:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	0b5b      	lsrs	r3, r3, #13
 8000a3a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <RCC_GetClocksFreq+0x14c>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	40da      	lsrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3724      	adds	r7, #36	; 0x24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40023800 	.word	0x40023800
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	017d7840 	.word	0x017d7840
 8000a6c:	20000004 	.word	0x20000004

08000a70 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a8e:	e006      	b.n	8000a9e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	4904      	ldr	r1, [pc, #16]	; (8000aac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	4909      	ldr	r1, [pc, #36]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ace:	e006      	b.n	8000ade <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4904      	ldr	r1, [pc, #16]	; (8000aec <RCC_APB1PeriphClockCmd+0x3c>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b06:	4909      	ldr	r1, [pc, #36]	; (8000b2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b0e:	e006      	b.n	8000b1e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4904      	ldr	r1, [pc, #16]	; (8000b2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000b54:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <SYSCFG_EXTILineConfig+0x80>)
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <SYSCFG_EXTILineConfig+0x80>)
 8000b68:	79b9      	ldrb	r1, [r7, #6]
 8000b6a:	0889      	lsrs	r1, r1, #2
 8000b6c:	b2c9      	uxtb	r1, r1
 8000b6e:	401a      	ands	r2, r3
 8000b70:	1c8b      	adds	r3, r1, #2
 8000b72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <SYSCFG_EXTILineConfig+0x80>)
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b84:	79f9      	ldrb	r1, [r7, #7]
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <SYSCFG_EXTILineConfig+0x80>)
 8000b94:	79b9      	ldrb	r1, [r7, #6]
 8000b96:	0889      	lsrs	r1, r1, #2
 8000b98:	b2c9      	uxtb	r1, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	1c8b      	adds	r3, r1, #2
 8000b9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40013800 	.word	0x40013800

08000bb4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	8a1b      	ldrh	r3, [r3, #16]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	88db      	ldrh	r3, [r3, #6]
 8000be2:	461a      	mov	r2, r3
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	4313      	orrs	r3, r2
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	899b      	ldrh	r3, [r3, #12]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000c00:	f023 030c 	bic.w	r3, r3, #12
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	889a      	ldrh	r2, [r3, #4]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	891b      	ldrh	r3, [r3, #8]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	8a9b      	ldrh	r3, [r3, #20]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	899b      	ldrh	r3, [r3, #12]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	4313      	orrs	r3, r2
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe64 	bl	8000920 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <USART_Init+0x168>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d003      	beq.n	8000c68 <USART_Init+0xb4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <USART_Init+0x16c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d102      	bne.n	8000c6e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	e001      	b.n	8000c72 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	899b      	ldrh	r3, [r3, #12]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da0c      	bge.n	8000c98 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000c7e:	6a3a      	ldr	r2, [r7, #32]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	009a      	lsls	r2, r3, #2
 8000c88:	441a      	add	r2, r3
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	e00b      	b.n	8000cb0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009a      	lsls	r2, r3, #2
 8000ca2:	441a      	add	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <USART_Init+0x170>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	095b      	lsrs	r3, r3, #5
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	2264      	movs	r2, #100	; 0x64
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	69fa      	ldr	r2, [r7, #28]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	899b      	ldrh	r3, [r3, #12]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da0c      	bge.n	8000cf4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	3332      	adds	r3, #50	; 0x32
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <USART_Init+0x170>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf2:	e00b      	b.n	8000d0c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	3332      	adds	r3, #50	; 0x32
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <USART_Init+0x170>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	095b      	lsrs	r3, r3, #5
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	811a      	strh	r2, [r3, #8]
}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40011400 	.word	0x40011400
 8000d24:	51eb851f 	.word	0x51eb851f

08000d28 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	899b      	ldrh	r3, [r3, #12]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000d4a:	e007      	b.n	8000d5c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	899b      	ldrh	r3, [r3, #12]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	819a      	strh	r2, [r3, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f103 0208 	add.w	r2, r3, #8
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f103 0208 	add.w	r2, r3, #8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f103 0208 	add.w	r2, r3, #8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6892      	ldr	r2, [r2, #8]
 8000e20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6852      	ldr	r2, [r2, #4]
 8000e2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d103      	bne.n	8000e3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b08c      	sub	sp, #48	; 0x30
 8000e62:	af04      	add	r7, sp, #16
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fe8e 	bl	8001b94 <pvPortMalloc>
 8000e78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00e      	beq.n	8000e9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e80:	2058      	movs	r0, #88	; 0x58
 8000e82:	f000 fe87 	bl	8001b94 <pvPortMalloc>
 8000e86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
 8000e94:	e005      	b.n	8000ea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f000 ff3e 	bl	8001d18 <vPortFree>
 8000e9c:	e001      	b.n	8000ea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d013      	beq.n	8000ed0 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f000 f80e 	bl	8000ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000ec4:	69f8      	ldr	r0, [r7, #28]
 8000ec6:	f000 f89f 	bl	8001008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	e002      	b.n	8000ed6 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef8:	f383 8811 	msr	BASEPRI, r3
 8000efc:	f3bf 8f6f 	isb	sy
 8000f00:	f3bf 8f4f 	dsb	sy
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e7fe      	b.n	8000f06 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	461a      	mov	r2, r3
 8000f12:	21a5      	movs	r1, #165	; 0xa5
 8000f14:	f002 fc1c 	bl	8003750 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f22:	3b01      	subs	r3, #1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	f023 0307 	bic.w	r3, r3, #7
 8000f30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d009      	beq.n	8000f50 <prvInitialiseNewTask+0x70>
 8000f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	e7fe      	b.n	8000f4e <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	e012      	b.n	8000f7c <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	7819      	ldrb	r1, [r3, #0]
 8000f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	4413      	add	r3, r2
 8000f64:	3334      	adds	r3, #52	; 0x34
 8000f66:	460a      	mov	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b09      	cmp	r3, #9
 8000f80:	d9e9      	bls.n	8000f56 <prvInitialiseNewTask+0x76>
 8000f82:	e000      	b.n	8000f86 <prvInitialiseNewTask+0xa6>
		{
			break;
 8000f84:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d901      	bls.n	8000f98 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f94:	2304      	movs	r3, #4
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa2:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fac:	3304      	adds	r3, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fefa 	bl	8000da8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fef5 	bl	8000da8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	f1c3 0205 	rsb	r2, r3, #5
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	68f9      	ldr	r1, [r7, #12]
 8000fe6:	69b8      	ldr	r0, [r7, #24]
 8000fe8:	f000 fb88 	bl	80016fc <pxPortInitialiseStack>
 8000fec:	4602      	mov	r2, r0
 8000fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001010:	f000 fc9c 	bl	800194c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <prvAddNewTaskToReadyList+0xfc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <prvAddNewTaskToReadyList+0xfc>)
 800101c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <prvAddNewTaskToReadyList+0x100>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001026:	4a38      	ldr	r2, [pc, #224]	; (8001108 <prvAddNewTaskToReadyList+0x100>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <prvAddNewTaskToReadyList+0xfc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d110      	bne.n	8001056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001034:	f000 fac6 	bl	80015c4 <prvInitialiseTaskLists>
 8001038:	e00d      	b.n	8001056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <prvAddNewTaskToReadyList+0x104>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <prvAddNewTaskToReadyList+0x100>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	429a      	cmp	r2, r3
 800104e:	d802      	bhi.n	8001056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <prvAddNewTaskToReadyList+0x100>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <prvAddNewTaskToReadyList+0x108>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <prvAddNewTaskToReadyList+0x108>)
 800105e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <prvAddNewTaskToReadyList+0x108>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d016      	beq.n	800109c <prvAddNewTaskToReadyList+0x94>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f002 f92b 	bl	80032cc <SEGGER_SYSVIEW_OnTaskCreate>
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	461d      	mov	r5, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	461c      	mov	r4, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	1ae3      	subs	r3, r4, r3
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	462b      	mov	r3, r5
 8001098:	f000 fffa 	bl	8002090 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 f99c 	bl	80033dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2201      	movs	r2, #1
 80010aa:	409a      	lsls	r2, r3
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <prvAddNewTaskToReadyList+0x10c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <prvAddNewTaskToReadyList+0x10c>)
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <prvAddNewTaskToReadyList+0x110>)
 80010c4:	441a      	add	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f7ff fe78 	bl	8000dc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80010d2:	f000 fc69 	bl	80019a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <prvAddNewTaskToReadyList+0x104>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00e      	beq.n	80010fc <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <prvAddNewTaskToReadyList+0x100>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <prvAddNewTaskToReadyList+0x114>)
 80010ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	f3bf 8f4f 	dsb	sy
 80010f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	20000110 	.word	0x20000110
 8001108:	20000038 	.word	0x20000038
 800110c:	2000011c 	.word	0x2000011c
 8001110:	2000012c 	.word	0x2000012c
 8001114:	20000118 	.word	0x20000118
 8001118:	2000003c 	.word	0x2000003c
 800111c:	e000ed04 	.word	0xe000ed04

08001120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <vTaskStartScheduler+0x90>)
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	2300      	movs	r3, #0
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2300      	movs	r3, #0
 8001130:	2282      	movs	r2, #130	; 0x82
 8001132:	4920      	ldr	r1, [pc, #128]	; (80011b4 <vTaskStartScheduler+0x94>)
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <vTaskStartScheduler+0x98>)
 8001136:	f7ff fe92 	bl	8000e5e <xTaskCreate>
 800113a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d123      	bne.n	800118a <vTaskStartScheduler+0x6a>
 8001142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001146:	f383 8811 	msr	BASEPRI, r3
 800114a:	f3bf 8f6f 	isb	sy
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <vTaskStartScheduler+0x9c>)
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <vTaskStartScheduler+0xa0>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <vTaskStartScheduler+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <vTaskStartScheduler+0xa8>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <vTaskStartScheduler+0x90>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d102      	bne.n	800117a <vTaskStartScheduler+0x5a>
 8001174:	f002 f88e 	bl	8003294 <SEGGER_SYSVIEW_OnIdle>
 8001178:	e004      	b.n	8001184 <vTaskStartScheduler+0x64>
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <vTaskStartScheduler+0xa8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f002 f8e8 	bl	8003354 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001184:	f000 fb44 	bl	8001810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001188:	e00d      	b.n	80011a6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d109      	bne.n	80011a6 <vTaskStartScheduler+0x86>
 8001192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001196:	f383 8811 	msr	BASEPRI, r3
 800119a:	f3bf 8f6f 	isb	sy
 800119e:	f3bf 8f4f 	dsb	sy
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	e7fe      	b.n	80011a4 <vTaskStartScheduler+0x84>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000134 	.word	0x20000134
 80011b4:	08003784 	.word	0x08003784
 80011b8:	08001595 	.word	0x08001595
 80011bc:	20000130 	.word	0x20000130
 80011c0:	2000011c 	.word	0x2000011c
 80011c4:	20000114 	.word	0x20000114
 80011c8:	20000038 	.word	0x20000038

080011cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <vTaskSuspendAll+0x18>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <vTaskSuspendAll+0x18>)
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	20000138 	.word	0x20000138

080011e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80011f6:	4b43      	ldr	r3, [pc, #268]	; (8001304 <xTaskResumeAll+0x11c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <xTaskResumeAll+0x2a>
 80011fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001202:	f383 8811 	msr	BASEPRI, r3
 8001206:	f3bf 8f6f 	isb	sy
 800120a:	f3bf 8f4f 	dsb	sy
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	e7fe      	b.n	8001210 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001212:	f000 fb9b 	bl	800194c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <xTaskResumeAll+0x11c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3b01      	subs	r3, #1
 800121c:	4a39      	ldr	r2, [pc, #228]	; (8001304 <xTaskResumeAll+0x11c>)
 800121e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001220:	4b38      	ldr	r3, [pc, #224]	; (8001304 <xTaskResumeAll+0x11c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d165      	bne.n	80012f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001228:	4b37      	ldr	r3, [pc, #220]	; (8001308 <xTaskResumeAll+0x120>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d061      	beq.n	80012f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001230:	e032      	b.n	8001298 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <xTaskResumeAll+0x124>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3318      	adds	r3, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fde3 	bl	8000e0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3304      	adds	r3, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fdde 	bl	8000e0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	f002 f8c3 	bl	80033dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	2201      	movs	r2, #1
 800125c:	409a      	lsls	r2, r3
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <xTaskResumeAll+0x128>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	4a2a      	ldr	r2, [pc, #168]	; (8001310 <xTaskResumeAll+0x128>)
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <xTaskResumeAll+0x12c>)
 8001276:	441a      	add	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3304      	adds	r3, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f7ff fd9f 	bl	8000dc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <xTaskResumeAll+0x130>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	429a      	cmp	r2, r3
 8001290:	d302      	bcc.n	8001298 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <xTaskResumeAll+0x134>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <xTaskResumeAll+0x124>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1c8      	bne.n	8001232 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80012a6:	f000 fa09 	bl	80016bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <xTaskResumeAll+0x138>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d010      	beq.n	80012d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80012b6:	f000 f849 	bl	800134c <xTaskIncrementTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <xTaskResumeAll+0x134>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f1      	bne.n	80012b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <xTaskResumeAll+0x138>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <xTaskResumeAll+0x134>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d009      	beq.n	80012f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <xTaskResumeAll+0x13c>)
 80012e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	f3bf 8f4f 	dsb	sy
 80012f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80012f4:	f000 fb58 	bl	80019a8 <vPortExitCritical>

	return xAlreadyYielded;
 80012f8:	68bb      	ldr	r3, [r7, #8]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000138 	.word	0x20000138
 8001308:	20000110 	.word	0x20000110
 800130c:	200000d0 	.word	0x200000d0
 8001310:	20000118 	.word	0x20000118
 8001314:	2000003c 	.word	0x2000003c
 8001318:	20000038 	.word	0x20000038
 800131c:	20000124 	.word	0x20000124
 8001320:	20000120 	.word	0x20000120
 8001324:	e000ed04 	.word	0xe000ed04

08001328 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800132e:	f000 fbf3 	bl	8001b18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <xTaskGetTickCountFromISR+0x20>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800133c:	683b      	ldr	r3, [r7, #0]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000114 	.word	0x20000114

0800134c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <xTaskIncrementTick+0x14c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 808b 	bne.w	8001476 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <xTaskIncrementTick+0x150>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <xTaskIncrementTick+0x150>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d11f      	bne.n	80013b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <xTaskIncrementTick+0x154>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <xTaskIncrementTick+0x46>
 800137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001382:	f383 8811 	msr	BASEPRI, r3
 8001386:	f3bf 8f6f 	isb	sy
 800138a:	f3bf 8f4f 	dsb	sy
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	e7fe      	b.n	8001390 <xTaskIncrementTick+0x44>
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <xTaskIncrementTick+0x154>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <xTaskIncrementTick+0x158>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <xTaskIncrementTick+0x154>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <xTaskIncrementTick+0x158>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <xTaskIncrementTick+0x15c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <xTaskIncrementTick+0x15c>)
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	f000 f984 	bl	80016bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <xTaskIncrementTick+0x160>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d34c      	bcc.n	8001458 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <xTaskIncrementTick+0x154>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <xTaskIncrementTick+0x160>)
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	601a      	str	r2, [r3, #0]
					break;
 80013d0:	e042      	b.n	8001458 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <xTaskIncrementTick+0x154>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d203      	bcs.n	80013f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <xTaskIncrementTick+0x160>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80013f0:	e032      	b.n	8001458 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3304      	adds	r3, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fd07 	bl	8000e0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3318      	adds	r3, #24
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fcfe 	bl	8000e0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4618      	mov	r0, r3
 8001412:	f001 ffe3 	bl	80033dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	2201      	movs	r2, #1
 800141c:	409a      	lsls	r2, r3
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <xTaskIncrementTick+0x164>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <xTaskIncrementTick+0x164>)
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <xTaskIncrementTick+0x168>)
 8001436:	441a      	add	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3304      	adds	r3, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f7ff fcbf 	bl	8000dc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <xTaskIncrementTick+0x16c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	429a      	cmp	r2, r3
 8001450:	d3b5      	bcc.n	80013be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001452:	2301      	movs	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001456:	e7b2      	b.n	80013be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <xTaskIncrementTick+0x16c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145e:	4915      	ldr	r1, [pc, #84]	; (80014b4 <xTaskIncrementTick+0x168>)
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d907      	bls.n	8001480 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e004      	b.n	8001480 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <xTaskIncrementTick+0x170>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <xTaskIncrementTick+0x170>)
 800147e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <xTaskIncrementTick+0x174>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800148c:	697b      	ldr	r3, [r7, #20]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000138 	.word	0x20000138
 800149c:	20000114 	.word	0x20000114
 80014a0:	200000c8 	.word	0x200000c8
 80014a4:	200000cc 	.word	0x200000cc
 80014a8:	20000128 	.word	0x20000128
 80014ac:	20000130 	.word	0x20000130
 80014b0:	20000118 	.word	0x20000118
 80014b4:	2000003c 	.word	0x2000003c
 80014b8:	20000038 	.word	0x20000038
 80014bc:	20000120 	.word	0x20000120
 80014c0:	20000124 	.word	0x20000124

080014c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <vTaskSwitchContext+0xb8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <vTaskSwitchContext+0xbc>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80014d8:	e04c      	b.n	8001574 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <vTaskSwitchContext+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <vTaskSwitchContext+0xc0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	f1c3 031f 	rsb	r3, r3, #31
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	4924      	ldr	r1, [pc, #144]	; (8001588 <vTaskSwitchContext+0xc4>)
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <vTaskSwitchContext+0x5a>
	__asm volatile
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	f3bf 8f4f 	dsb	sy
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	e7fe      	b.n	800151c <vTaskSwitchContext+0x58>
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <vTaskSwitchContext+0xc4>)
 800152a:	4413      	add	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3308      	adds	r3, #8
 8001540:	429a      	cmp	r2, r3
 8001542:	d104      	bne.n	800154e <vTaskSwitchContext+0x8a>
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <vTaskSwitchContext+0xc8>)
 8001556:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <vTaskSwitchContext+0xc8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <vTaskSwitchContext+0xcc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d102      	bne.n	800156a <vTaskSwitchContext+0xa6>
 8001564:	f001 fe96 	bl	8003294 <SEGGER_SYSVIEW_OnIdle>
}
 8001568:	e004      	b.n	8001574 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <vTaskSwitchContext+0xc8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fef0 	bl	8003354 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000138 	.word	0x20000138
 8001580:	20000124 	.word	0x20000124
 8001584:	20000118 	.word	0x20000118
 8001588:	2000003c 	.word	0x2000003c
 800158c:	20000038 	.word	0x20000038
 8001590:	20000134 	.word	0x20000134

08001594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800159c:	f000 f852 	bl	8001644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <prvIdleTask+0x28>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d9f9      	bls.n	800159c <prvIdleTask+0x8>
			{
				taskYIELD();
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <prvIdleTask+0x2c>)
 80015aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80015b8:	e7f0      	b.n	800159c <prvIdleTask+0x8>
 80015ba:	bf00      	nop
 80015bc:	2000003c 	.word	0x2000003c
 80015c0:	e000ed04 	.word	0xe000ed04

080015c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	e00c      	b.n	80015ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <prvInitialiseTaskLists+0x60>)
 80015dc:	4413      	add	r3, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fbc2 	bl	8000d68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3301      	adds	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d9ef      	bls.n	80015d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <prvInitialiseTaskLists+0x64>)
 80015f2:	f7ff fbb9 	bl	8000d68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <prvInitialiseTaskLists+0x68>)
 80015f8:	f7ff fbb6 	bl	8000d68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <prvInitialiseTaskLists+0x6c>)
 80015fe:	f7ff fbb3 	bl	8000d68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <prvInitialiseTaskLists+0x70>)
 8001604:	f7ff fbb0 	bl	8000d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <prvInitialiseTaskLists+0x74>)
 800160a:	f7ff fbad 	bl	8000d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <prvInitialiseTaskLists+0x78>)
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <prvInitialiseTaskLists+0x64>)
 8001612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <prvInitialiseTaskLists+0x7c>)
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <prvInitialiseTaskLists+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000003c 	.word	0x2000003c
 8001628:	200000a0 	.word	0x200000a0
 800162c:	200000b4 	.word	0x200000b4
 8001630:	200000d0 	.word	0x200000d0
 8001634:	200000e4 	.word	0x200000e4
 8001638:	200000fc 	.word	0x200000fc
 800163c:	200000c8 	.word	0x200000c8
 8001640:	200000cc 	.word	0x200000cc

08001644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800164a:	e019      	b.n	8001680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800164c:	f000 f97e 	bl	800194c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <prvCheckTasksWaitingTermination+0x4c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3304      	adds	r3, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fbd4 	bl	8000e0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <prvCheckTasksWaitingTermination+0x50>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3b01      	subs	r3, #1
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <prvCheckTasksWaitingTermination+0x50>)
 800166a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <prvCheckTasksWaitingTermination+0x54>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <prvCheckTasksWaitingTermination+0x54>)
 8001674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001676:	f000 f997 	bl	80019a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f80e 	bl	800169c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <prvCheckTasksWaitingTermination+0x54>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e1      	bne.n	800164c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200000e4 	.word	0x200000e4
 8001694:	20000110 	.word	0x20000110
 8001698:	200000f8 	.word	0x200000f8

0800169c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fb35 	bl	8001d18 <vPortFree>
			vPortFree( pxTCB );
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fb32 	bl	8001d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <prvResetNextTaskUnblockTime+0x38>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d104      	bne.n	80016d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <prvResetNextTaskUnblockTime+0x3c>)
 80016ce:	f04f 32ff 	mov.w	r2, #4294967295
 80016d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80016d4:	e008      	b.n	80016e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <prvResetNextTaskUnblockTime+0x38>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <prvResetNextTaskUnblockTime+0x3c>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	200000c8 	.word	0x200000c8
 80016f8:	20000130 	.word	0x20000130

080016fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3b04      	subs	r3, #4
 800170c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b04      	subs	r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f023 0201 	bic.w	r2, r3, #1
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3b04      	subs	r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <pxPortInitialiseStack+0x64>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b14      	subs	r3, #20
 8001736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3b04      	subs	r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f06f 0202 	mvn.w	r2, #2
 800174a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3b20      	subs	r3, #32
 8001750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	08001765 	.word	0x08001765

08001764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <prvTaskExitError+0x50>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001776:	d009      	beq.n	800178c <prvTaskExitError+0x28>
 8001778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177c:	f383 8811 	msr	BASEPRI, r3
 8001780:	f3bf 8f6f 	isb	sy
 8001784:	f3bf 8f4f 	dsb	sy
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e7fe      	b.n	800178a <prvTaskExitError+0x26>
 800178c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
 800179c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800179e:	bf00      	nop
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0fc      	beq.n	80017a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000014 	.word	0x20000014
	...

080017c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <pxCurrentTCBConst2>)
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	6808      	ldr	r0, [r1, #0]
 80017c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ca:	f380 8809 	msr	PSP, r0
 80017ce:	f3bf 8f6f 	isb	sy
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f380 8811 	msr	BASEPRI, r0
 80017da:	4770      	bx	lr
 80017dc:	f3af 8000 	nop.w

080017e0 <pxCurrentTCBConst2>:
 80017e0:	20000038 	.word	0x20000038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop

080017e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <prvPortStartFirstTask+0x24>)
 80017ea:	6800      	ldr	r0, [r0, #0]
 80017ec:	6800      	ldr	r0, [r0, #0]
 80017ee:	f380 8808 	msr	MSP, r0
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f380 8814 	msr	CONTROL, r0
 80017fa:	b662      	cpsie	i
 80017fc:	b661      	cpsie	f
 80017fe:	f3bf 8f4f 	dsb	sy
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	df00      	svc	0
 8001808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800180a:	bf00      	nop
 800180c:	e000ed08 	.word	0xe000ed08

08001810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <xPortStartScheduler+0x118>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a44      	ldr	r2, [pc, #272]	; (800192c <xPortStartScheduler+0x11c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d109      	bne.n	8001834 <xPortStartScheduler+0x24>
 8001820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	e7fe      	b.n	8001832 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <xPortStartScheduler+0x118>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <xPortStartScheduler+0x120>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d109      	bne.n	8001852 <xPortStartScheduler+0x42>
 800183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e7fe      	b.n	8001850 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <xPortStartScheduler+0x124>)
 8001854:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	22ff      	movs	r2, #255	; 0xff
 8001862:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <xPortStartScheduler+0x128>)
 8001878:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <xPortStartScheduler+0x12c>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001880:	e009      	b.n	8001896 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <xPortStartScheduler+0x12c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <xPortStartScheduler+0x12c>)
 800188a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	2b80      	cmp	r3, #128	; 0x80
 80018a0:	d0ef      	beq.n	8001882 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <xPortStartScheduler+0x12c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d009      	beq.n	80018c2 <xPortStartScheduler+0xb2>
 80018ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b2:	f383 8811 	msr	BASEPRI, r3
 80018b6:	f3bf 8f6f 	isb	sy
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	e7fe      	b.n	80018c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <xPortStartScheduler+0x12c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <xPortStartScheduler+0x12c>)
 80018ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <xPortStartScheduler+0x12c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <xPortStartScheduler+0x12c>)
 80018d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <xPortStartScheduler+0x130>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <xPortStartScheduler+0x130>)
 80018e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <xPortStartScheduler+0x130>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <xPortStartScheduler+0x130>)
 80018f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80018f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80018f8:	f000 f8e0 	bl	8001abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <xPortStartScheduler+0x134>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001902:	f000 f8ff 	bl	8001b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <xPortStartScheduler+0x138>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <xPortStartScheduler+0x138>)
 800190c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001910:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001912:	f7ff ff69 	bl	80017e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001916:	f7ff fdd5 	bl	80014c4 <vTaskSwitchContext>
	prvTaskExitError();
 800191a:	f7ff ff23 	bl	8001764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	410fc271 	.word	0x410fc271
 8001930:	410fc270 	.word	0x410fc270
 8001934:	e000e400 	.word	0xe000e400
 8001938:	2000013c 	.word	0x2000013c
 800193c:	20000140 	.word	0x20000140
 8001940:	e000ed20 	.word	0xe000ed20
 8001944:	20000014 	.word	0x20000014
 8001948:	e000ef34 	.word	0xe000ef34

0800194c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <vPortEnterCritical+0x54>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <vPortEnterCritical+0x54>)
 800196c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <vPortEnterCritical+0x54>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10e      	bne.n	8001994 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <vPortEnterCritical+0x58>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <vPortEnterCritical+0x48>
 8001980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001984:	f383 8811 	msr	BASEPRI, r3
 8001988:	f3bf 8f6f 	isb	sy
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	e7fe      	b.n	8001992 <vPortEnterCritical+0x46>
	}
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000014 	.word	0x20000014
 80019a4:	e000ed04 	.word	0xe000ed04

080019a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <vPortExitCritical+0x4c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <vPortExitCritical+0x22>
 80019b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	e7fe      	b.n	80019c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <vPortExitCritical+0x4c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <vPortExitCritical+0x4c>)
 80019d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <vPortExitCritical+0x4c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d104      	bne.n	80019e6 <vPortExitCritical+0x3e>
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000014 	.word	0x20000014
	...

08001a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001a00:	f3ef 8009 	mrs	r0, PSP
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <pxCurrentTCBConst>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f01e 0f10 	tst.w	lr, #16
 8001a10:	bf08      	it	eq
 8001a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1a:	6010      	str	r0, [r2, #0]
 8001a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a24:	f380 8811 	msr	BASEPRI, r0
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
 8001a30:	f7ff fd48 	bl	80014c4 <vTaskSwitchContext>
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f380 8811 	msr	BASEPRI, r0
 8001a3c:	bc09      	pop	{r0, r3}
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	6808      	ldr	r0, [r1, #0]
 8001a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a46:	f01e 0f10 	tst.w	lr, #16
 8001a4a:	bf08      	it	eq
 8001a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a50:	f380 8809 	msr	PSP, r0
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w

08001a60 <pxCurrentTCBConst>:
 8001a60:	20000038 	.word	0x20000038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop

08001a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8001a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001a80:	f001 fb8e 	bl	80031a0 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001a84:	f7ff fc62 	bl	800134c <xTaskIncrementTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001a8e:	f001 fbe5 	bl	800325c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <SysTick_Handler+0x50>)
 8001a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e003      	b.n	8001aa4 <SysTick_Handler+0x3c>
		}
		else
		{
			traceISR_EXIT();
 8001a9c:	f001 fbc2 	bl	8003224 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 8001aa0:	f7ff fd10 	bl	80014c4 <vTaskSwitchContext>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000ed04 	.word	0xe000ed04

08001abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <vPortSetupTimerInterrupt+0x34>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <vPortSetupTimerInterrupt+0x38>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <vPortSetupTimerInterrupt+0x3c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <vPortSetupTimerInterrupt+0x40>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <vPortSetupTimerInterrupt+0x44>)
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <vPortSetupTimerInterrupt+0x34>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010
 8001af4:	e000e018 	.word	0xe000e018
 8001af8:	20000000 	.word	0x20000000
 8001afc:	10624dd3 	.word	0x10624dd3
 8001b00:	e000e014 	.word	0xe000e014

08001b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b14 <vPortEnableVFP+0x10>
 8001b08:	6801      	ldr	r1, [r0, #0]
 8001b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b0e:	6001      	str	r1, [r0, #0]
 8001b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001b12:	bf00      	nop
 8001b14:	e000ed88 	.word	0xe000ed88

08001b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001b1e:	f3ef 8305 	mrs	r3, IPSR
 8001b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d913      	bls.n	8001b52 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b2a:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <vPortValidateInterruptPriority+0x6c>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <vPortValidateInterruptPriority+0x70>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	7afa      	ldrb	r2, [r7, #11]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d209      	bcs.n	8001b52 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b42:	f383 8811 	msr	BASEPRI, r3
 8001b46:	f3bf 8f6f 	isb	sy
 8001b4a:	f3bf 8f4f 	dsb	sy
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	e7fe      	b.n	8001b50 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <vPortValidateInterruptPriority+0x74>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <vPortValidateInterruptPriority+0x78>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d909      	bls.n	8001b76 <vPortValidateInterruptPriority+0x5e>
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	e7fe      	b.n	8001b74 <vPortValidateInterruptPriority+0x5c>
	}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e3f0 	.word	0xe000e3f0
 8001b88:	2000013c 	.word	0x2000013c
 8001b8c:	e000ed0c 	.word	0xe000ed0c
 8001b90:	20000140 	.word	0x20000140

08001b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001ba0:	f7ff fb14 	bl	80011cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <pvPortMalloc+0x170>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001bac:	f000 f90c 	bl	8001dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <pvPortMalloc+0x174>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 808c 	bne.w	8001cd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01c      	beq.n	8001bfe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d013      	beq.n	8001bfe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f023 0307 	bic.w	r3, r3, #7
 8001bdc:	3308      	adds	r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <pvPortMalloc+0x6a>
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e7fe      	b.n	8001bfc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d068      	beq.n	8001cd6 <pvPortMalloc+0x142>
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <pvPortMalloc+0x178>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d863      	bhi.n	8001cd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <pvPortMalloc+0x17c>)
 8001c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <pvPortMalloc+0x17c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c18:	e004      	b.n	8001c24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d903      	bls.n	8001c36 <pvPortMalloc+0xa2>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f1      	bne.n	8001c1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <pvPortMalloc+0x170>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d04a      	beq.n	8001cd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	4413      	add	r3, r2
 8001c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d91e      	bls.n	8001ca0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <pvPortMalloc+0xf4>
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e7fe      	b.n	8001c86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c9a:	69b8      	ldr	r0, [r7, #24]
 8001c9c:	f000 f8f6 	bl	8001e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <pvPortMalloc+0x178>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <pvPortMalloc+0x178>)
 8001cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <pvPortMalloc+0x178>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <pvPortMalloc+0x180>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d203      	bcs.n	8001cc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <pvPortMalloc+0x178>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <pvPortMalloc+0x180>)
 8001cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <pvPortMalloc+0x174>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001cd6:	f7ff fa87 	bl	80011e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <pvPortMalloc+0x164>
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e7fe      	b.n	8001cf6 <pvPortMalloc+0x162>
	return pvReturn;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20012d4c 	.word	0x20012d4c
 8001d08:	20012d58 	.word	0x20012d58
 8001d0c:	20012d50 	.word	0x20012d50
 8001d10:	20012d44 	.word	0x20012d44
 8001d14:	20012d54 	.word	0x20012d54

08001d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d046      	beq.n	8001db8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	425b      	negs	r3, r3
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <vPortFree+0xa8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <vPortFree+0x42>
 8001d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e7fe      	b.n	8001d58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <vPortFree+0x5e>
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	e7fe      	b.n	8001d74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <vPortFree+0xa8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d019      	beq.n	8001db8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d115      	bne.n	8001db8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <vPortFree+0xa8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d9c:	f7ff fa16 	bl	80011cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <vPortFree+0xac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <vPortFree+0xac>)
 8001dac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001dae:	6938      	ldr	r0, [r7, #16]
 8001db0:	f000 f86c 	bl	8001e8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001db4:	f7ff fa18 	bl	80011e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20012d58 	.word	0x20012d58
 8001dc4:	20012d50 	.word	0x20012d50

08001dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001dce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <prvHeapInit+0xac>)
 8001dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3307      	adds	r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <prvHeapInit+0xac>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <prvHeapInit+0xb0>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <prvHeapInit+0xb0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e14:	2208      	movs	r2, #8
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0307 	bic.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <prvHeapInit+0xb4>)
 8001e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <prvHeapInit+0xb4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <prvHeapInit+0xb4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <prvHeapInit+0xb4>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <prvHeapInit+0xb8>)
 8001e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <prvHeapInit+0xbc>)
 8001e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <prvHeapInit+0xc0>)
 8001e62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20000144 	.word	0x20000144
 8001e78:	20012d44 	.word	0x20012d44
 8001e7c:	20012d4c 	.word	0x20012d4c
 8001e80:	20012d54 	.word	0x20012d54
 8001e84:	20012d50 	.word	0x20012d50
 8001e88:	20012d58 	.word	0x20012d58

08001e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <prvInsertBlockIntoFreeList+0xac>)
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e002      	b.n	8001ea0 <prvInsertBlockIntoFreeList+0x14>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d8f7      	bhi.n	8001e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d108      	bne.n	8001ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	441a      	add	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d118      	bne.n	8001f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <prvInsertBlockIntoFreeList+0xb0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d00d      	beq.n	8001f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e008      	b.n	8001f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <prvInsertBlockIntoFreeList+0xb0>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d002      	beq.n	8001f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20012d44 	.word	0x20012d44
 8001f3c:	20012d4c 	.word	0x20012d4c

08001f40 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <_cbSendSystemDesc+0x14>)
 8001f46:	f001 f8d7 	bl	80030f8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <_cbSendSystemDesc+0x18>)
 8001f4c:	f001 f8d4 	bl	80030f8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	0800378c 	.word	0x0800378c
 8001f58:	080037d4 	.word	0x080037d4

08001f5c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SEGGER_SYSVIEW_Conf+0x20>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SEGGER_SYSVIEW_Conf+0x20>)
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SEGGER_SYSVIEW_Conf+0x24>)
 8001f6a:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <SEGGER_SYSVIEW_Conf+0x28>)
 8001f6c:	f000 fd4c 	bl	8002a08 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001f70:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001f74:	f000 fd86 	bl	8002a84 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	08001f41 	.word	0x08001f41
 8001f84:	0800386c 	.word	0x0800386c

08001f88 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	e034      	b.n	8001ffe <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001f94:	491e      	ldr	r1, [pc, #120]	; (8002010 <_cbSendTaskList+0x88>)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	491a      	ldr	r1, [pc, #104]	; (8002010 <_cbSendTaskList+0x88>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	4916      	ldr	r1, [pc, #88]	; (8002010 <_cbSendTaskList+0x88>)
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	681d      	ldr	r5, [r3, #0]
 8001fc8:	4911      	ldr	r1, [pc, #68]	; (8002010 <_cbSendTaskList+0x88>)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	681e      	ldr	r6, [r3, #0]
 8001fda:	490d      	ldr	r1, [pc, #52]	; (8002010 <_cbSendTaskList+0x88>)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3310      	adds	r3, #16
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4633      	mov	r3, r6
 8001ff0:	462a      	mov	r2, r5
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	f000 f8b4 	bl	8002160 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <_cbSendTaskList+0x8c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d3c5      	bcc.n	8001f94 <_cbSendTaskList+0xc>
  }
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002010:	20012d5c 	.word	0x20012d5c
 8002014:	20012dfc 	.word	0x20012dfc

08002018 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800201e:	f7ff f983 	bl	8001328 <xTaskGetTickCountFromISR>
 8002022:	4603      	mov	r3, r0
 8002024:	f04f 0400 	mov.w	r4, #0
 8002028:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800202c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002030:	462b      	mov	r3, r5
 8002032:	4634      	mov	r4, r6
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	0162      	lsls	r2, r4, #5
 800203e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002042:	0159      	lsls	r1, r3, #5
 8002044:	460b      	mov	r3, r1
 8002046:	4614      	mov	r4, r2
 8002048:	1b5b      	subs	r3, r3, r5
 800204a:	eb64 0406 	sbc.w	r4, r4, r6
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	00a2      	lsls	r2, r4, #2
 8002058:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800205c:	0099      	lsls	r1, r3, #2
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	195b      	adds	r3, r3, r5
 8002064:	eb44 0406 	adc.w	r4, r4, r6
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	00e2      	lsls	r2, r4, #3
 8002072:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002076:	00d9      	lsls	r1, r3, #3
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002080:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002084:	4618      	mov	r0, r3
 8002086:	4621      	mov	r1, r4
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002090 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800209e:	2205      	movs	r2, #5
 80020a0:	492b      	ldr	r1, [pc, #172]	; (8002150 <SYSVIEW_AddTask+0xc0>)
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	f001 fb3a 	bl	800371c <memcmp>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04b      	beq.n	8002146 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	d903      	bls.n	80020be <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80020b6:	4828      	ldr	r0, [pc, #160]	; (8002158 <SYSVIEW_AddTask+0xc8>)
 80020b8:	f001 fab0 	bl	800361c <SEGGER_SYSVIEW_Warn>
    return;
 80020bc:	e044      	b.n	8002148 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80020be:	4b25      	ldr	r3, [pc, #148]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4926      	ldr	r1, [pc, #152]	; (800215c <SYSVIEW_AddTask+0xcc>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <SYSVIEW_AddTask+0xcc>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3304      	adds	r3, #4
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	491b      	ldr	r1, [pc, #108]	; (800215c <SYSVIEW_AddTask+0xcc>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3308      	adds	r3, #8
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4916      	ldr	r1, [pc, #88]	; (800215c <SYSVIEW_AddTask+0xcc>)
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	330c      	adds	r3, #12
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4910      	ldr	r1, [pc, #64]	; (800215c <SYSVIEW_AddTask+0xcc>)
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3310      	adds	r3, #16
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <SYSVIEW_AddTask+0xc4>)
 8002132:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f80e 	bl	8002160 <SYSVIEW_SendTaskInfo>
 8002144:	e000      	b.n	8002148 <SYSVIEW_AddTask+0xb8>
    return;
 8002146:	bf00      	nop

}
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	080037e4 	.word	0x080037e4
 8002154:	20012dfc 	.word	0x20012dfc
 8002158:	080037ec 	.word	0x080037ec
 800215c:	20012d5c 	.word	0x20012d5c

08002160 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	2214      	movs	r2, #20
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f001 faea 	bl	8003750 <memset>
  TaskInfo.TaskID     = TaskID;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4618      	mov	r0, r3
 8002196:	f000 feb5 	bl	8002f04 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <_DoInit+0x8c>)
 80021ac:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2203      	movs	r2, #3
 80021b2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <_DoInit+0x90>)
 80021be:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <_DoInit+0x94>)
 80021c4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021cc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_DoInit+0x90>)
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_DoInit+0x98>)
 80021ea:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2210      	movs	r2, #16
 80021f0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3307      	adds	r3, #7
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <_DoInit+0x9c>)
 800220a:	6810      	ldr	r0, [r2, #0]
 800220c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <_DoInit+0xa0>)
 8002212:	6810      	ldr	r0, [r2, #0]
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	8891      	ldrh	r1, [r2, #4]
 8002218:	7992      	ldrb	r2, [r2, #6]
 800221a:	8099      	strh	r1, [r3, #4]
 800221c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2220      	movs	r2, #32
 8002222:	719a      	strb	r2, [r3, #6]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	2001732c 	.word	0x2001732c
 8002234:	0800383c 	.word	0x0800383c
 8002238:	20012e00 	.word	0x20012e00
 800223c:	20013200 	.word	0x20013200
 8002240:	08003848 	.word	0x08003848
 8002244:	0800384c 	.word	0x0800384c

08002248 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <SEGGER_RTT_ReadNoLock+0x100>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <SEGGER_RTT_ReadNoLock+0x18>
 800225c:	f7ff ffa2 	bl	80021a4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3360      	adds	r3, #96	; 0x60
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <SEGGER_RTT_ReadNoLock+0x100>)
 800226e:	4413      	add	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002286:	6a3a      	ldr	r2, [r7, #32]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	429a      	cmp	r2, r3
 800228c:	d92a      	bls.n	80022e4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4293      	cmp	r3, r2
 800229e:	bf28      	it	cs
 80022a0:	4613      	movcs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	4413      	add	r3, r2
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4619      	mov	r1, r3
 80022b0:	69f8      	ldr	r0, [r7, #28]
 80022b2:	f001 fa42 	bl	800373a <memcpy>
    NumBytesRead += NumBytesRem;
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80022ce:	6a3a      	ldr	r2, [r7, #32]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	6a3a      	ldr	r2, [r7, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d101      	bne.n	80022e4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	bf28      	it	cs
 80022f4:	4613      	movcs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d018      	beq.n	8002330 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4619      	mov	r1, r3
 800230a:	69f8      	ldr	r0, [r7, #28]
 800230c:	f001 fa15 	bl	800373a <memcpy>
    NumBytesRead += NumBytesRem;
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800233e:	4618      	mov	r0, r3
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2001732c 	.word	0x2001732c

0800234c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800236a:	4413      	add	r3, r2
 800236c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d854      	bhi.n	800242c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d30f      	bcc.n	80023b6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4413      	add	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f9c9 	bl	800373a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	441a      	add	r2, r3
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e054      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d34b      	bcc.n	800245e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d90e      	bls.n	80023f6 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 f9a8 	bl	800373a <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	441a      	add	r2, r3
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	e018      	b.n	8002428 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002402:	4618      	mov	r0, r3
 8002404:	f001 f999 	bl	800373a <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	6858      	ldr	r0, [r3, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	18d1      	adds	r1, r2, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	461a      	mov	r2, r3
 800241a:	f001 f98e 	bl	800373a <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002428:	2301      	movs	r3, #1
 800242a:	e019      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d30f      	bcc.n	800245e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244a:	4618      	mov	r0, r3
 800244c:	f001 f975 	bl	800373a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	441a      	add	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2001732c 	.word	0x2001732c

0800246c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8002482:	f7ff fe8f 	bl	80021a4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4293      	cmp	r3, r2
 8002490:	d24c      	bcs.n	800252c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8002492:	f3ef 8311 	mrs	r3, BASEPRI
 8002496:	f04f 0120 	mov.w	r1, #32
 800249a:	f381 8811 	msr	BASEPRI, r1
 800249e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d032      	beq.n	800250c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80024a6:	4925      	ldr	r1, [pc, #148]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80024ba:	4920      	ldr	r1, [pc, #128]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	3304      	adds	r3, #4
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80024d0:	491a      	ldr	r1, [pc, #104]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3320      	adds	r3, #32
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80024e4:	4915      	ldr	r1, [pc, #84]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3328      	adds	r3, #40	; 0x28
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80024f8:	4910      	ldr	r1, [pc, #64]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3324      	adds	r3, #36	; 0x24
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800250c:	490b      	ldr	r1, [pc, #44]	; (800253c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	332c      	adds	r3, #44	; 0x2c
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e002      	b.n	8002532 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002532:	697b      	ldr	r3, [r7, #20]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2001732c 	.word	0x2001732c

08002540 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002556:	f7ff fe25 	bl	80021a4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4293      	cmp	r3, r2
 8002564:	d24b      	bcs.n	80025fe <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002566:	f3ef 8311 	mrs	r3, BASEPRI
 800256a:	f04f 0120 	mov.w	r1, #32
 800256e:	f381 8811 	msr	BASEPRI, r1
 8002572:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d031      	beq.n	80025de <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800258e:	4920      	ldr	r1, [pc, #128]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	3364      	adds	r3, #100	; 0x64
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80025a2:	491b      	ldr	r1, [pc, #108]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3368      	adds	r3, #104	; 0x68
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80025b6:	4916      	ldr	r1, [pc, #88]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	3370      	adds	r3, #112	; 0x70
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80025ca:	4911      	ldr	r1, [pc, #68]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	336c      	adds	r3, #108	; 0x6c
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80025de:	490c      	ldr	r1, [pc, #48]	; (8002610 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3374      	adds	r3, #116	; 0x74
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e002      	b.n	8002604 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002604:	697b      	ldr	r3, [r7, #20]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2001732c 	.word	0x2001732c

08002614 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002624:	e002      	b.n	800262c <_EncodeStr+0x18>
    Len++;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f6      	bne.n	8002626 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d901      	bls.n	8002644 <_EncodeStr+0x30>
    Len = Limit;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2bfe      	cmp	r3, #254	; 0xfe
 8002648:	d806      	bhi.n	8002658 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e011      	b.n	800267c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60fa      	str	r2, [r7, #12]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	0a19      	lsrs	r1, r3, #8
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	b2ca      	uxtb	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002680:	e00a      	b.n	8002698 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	1c53      	adds	r3, r2, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	60f9      	str	r1, [r7, #12]
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	701a      	strb	r2, [r3, #0]
    n++;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d3f0      	bcc.n	8002682 <_EncodeStr+0x6e>
  }
  return pPayload;
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80026cc:	1cfb      	adds	r3, r7, #3
 80026ce:	2201      	movs	r2, #1
 80026d0:	4619      	mov	r1, r3
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fdb8 	bl	8002248 <SEGGER_RTT_ReadNoLock>
 80026d8:	4603      	mov	r3, r0
 80026da:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	dd44      	ble.n	800276c <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d01a      	beq.n	800271e <_HandleIncomingPacket+0x58>
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	dc06      	bgt.n	80026fa <_HandleIncomingPacket+0x34>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d010      	beq.n	8002712 <_HandleIncomingPacket+0x4c>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	dc11      	bgt.n	8002718 <_HandleIncomingPacket+0x52>
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d009      	beq.n	800270c <_HandleIncomingPacket+0x46>
 80026f8:	e02d      	b.n	8002756 <_HandleIncomingPacket+0x90>
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d015      	beq.n	800272a <_HandleIncomingPacket+0x64>
 80026fe:	2b06      	cmp	r3, #6
 8002700:	db10      	blt.n	8002724 <_HandleIncomingPacket+0x5e>
 8002702:	2b07      	cmp	r3, #7
 8002704:	d014      	beq.n	8002730 <_HandleIncomingPacket+0x6a>
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d015      	beq.n	8002736 <_HandleIncomingPacket+0x70>
 800270a:	e024      	b.n	8002756 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800270c:	f000 fa7e 	bl	8002c0c <SEGGER_SYSVIEW_Start>
      break;
 8002710:	e031      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002712:	f000 fb37 	bl	8002d84 <SEGGER_SYSVIEW_Stop>
      break;
 8002716:	e02e      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002718:	f000 fd12 	bl	8003140 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800271c:	e02b      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800271e:	f000 fcd7 	bl	80030d0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002722:	e028      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002724:	f000 fb54 	bl	8002dd0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002728:	e025      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800272a:	f000 ff39 	bl	80035a0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800272e:	e022      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002730:	f000 ff18 	bl	8003564 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002734:	e01f      	b.n	8002776 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002736:	1cfb      	adds	r3, r7, #3
 8002738:	2201      	movs	r2, #1
 800273a:	4619      	mov	r1, r3
 800273c:	2001      	movs	r0, #1
 800273e:	f7ff fd83 	bl	8002248 <SEGGER_RTT_ReadNoLock>
 8002742:	4603      	mov	r3, r0
 8002744:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	dd11      	ble.n	8002770 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fe88 	bl	8003464 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002754:	e00c      	b.n	8002770 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	b25b      	sxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	da0a      	bge.n	8002774 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800275e:	1cfb      	adds	r3, r7, #3
 8002760:	2201      	movs	r2, #1
 8002762:	4619      	mov	r1, r3
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff fd6f 	bl	8002248 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800276a:	e003      	b.n	8002774 <_HandleIncomingPacket+0xae>
    }
  }
 800276c:	bf00      	nop
 800276e:	e002      	b.n	8002776 <_HandleIncomingPacket+0xb0>
      break;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <_HandleIncomingPacket+0xb0>
      break;
 8002774:	bf00      	nop
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002786:	2301      	movs	r3, #1
 8002788:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	e00b      	b.n	80027b4 <_TrySendOverflowPacket+0x34>
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	1c59      	adds	r1, r3, #1
 80027a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	09db      	lsrs	r3, r3, #7
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b7f      	cmp	r3, #127	; 0x7f
 80027b8:	d8f0      	bhi.n	800279c <_TrySendOverflowPacket+0x1c>
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <_TrySendOverflowPacket+0xdc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	e00b      	b.n	80027fc <_TrySendOverflowPacket+0x7c>
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1c59      	adds	r1, r3, #1
 80027ec:	6279      	str	r1, [r7, #36]	; 0x24
 80027ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	09db      	lsrs	r3, r3, #7
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002800:	d8f0      	bhi.n	80027e4 <_TrySendOverflowPacket+0x64>
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	627a      	str	r2, [r7, #36]	; 0x24
 8002808:	6a3a      	ldr	r2, [r7, #32]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	461a      	mov	r2, r3
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	4619      	mov	r1, r3
 800281e:	2001      	movs	r0, #1
 8002820:	f7ff fd94 	bl	800234c <SEGGER_RTT_WriteSkipNoLock>
 8002824:	4603      	mov	r3, r0
 8002826:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e004      	b.n	800284c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <_TrySendOverflowPacket+0xd8>)
 800284a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800284c:	693b      	ldr	r3, [r7, #16]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3730      	adds	r7, #48	; 0x30
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20017218 	.word	0x20017218
 800285c:	e0001004 	.word	0xe0001004

08002860 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800286c:	4b63      	ldr	r3, [pc, #396]	; (80029fc <_SendPacket+0x19c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d010      	beq.n	8002896 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002874:	4b61      	ldr	r3, [pc, #388]	; (80029fc <_SendPacket+0x19c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a1 	beq.w	80029c0 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800287e:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <_SendPacket+0x19c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d109      	bne.n	800289a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002886:	f7ff ff7b 	bl	8002780 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <_SendPacket+0x19c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 8098 	bne.w	80029c4 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002894:	e001      	b.n	800289a <_SendPacket+0x3a>
    goto Send;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <_SendPacket+0x3c>
Send:
 800289a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b1f      	cmp	r3, #31
 80028a0:	d809      	bhi.n	80028b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80028a2:	4b56      	ldr	r3, [pc, #344]	; (80029fc <_SendPacket+0x19c>)
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8089 	bne.w	80029c8 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b17      	cmp	r3, #23
 80028ba:	d807      	bhi.n	80028cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e03d      	b.n	8002948 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b7f      	cmp	r3, #127	; 0x7f
 80028d8:	d912      	bls.n	8002900 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	09da      	lsrs	r2, r3, #7
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	3a01      	subs	r2, #1
 80028f2:	60fa      	str	r2, [r7, #12]
 80028f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e006      	b.n	800290e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3b01      	subs	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b7f      	cmp	r3, #127	; 0x7f
 8002912:	d912      	bls.n	800293a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	09da      	lsrs	r2, r3, #7
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b01      	subs	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	3a01      	subs	r2, #1
 800292c:	60fa      	str	r2, [r7, #12]
 800292e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e006      	b.n	8002948 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b01      	subs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <_SendPacket+0x1a0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <_SendPacket+0x19c>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	623b      	str	r3, [r7, #32]
 8002960:	e00b      	b.n	800297a <_SendPacket+0x11a>
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	6279      	str	r1, [r7, #36]	; 0x24
 800296c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	09db      	lsrs	r3, r3, #7
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b7f      	cmp	r3, #127	; 0x7f
 800297e:	d8f0      	bhi.n	8002962 <_SendPacket+0x102>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	627a      	str	r2, [r7, #36]	; 0x24
 8002986:	6a3a      	ldr	r2, [r7, #32]
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	461a      	mov	r2, r3
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	2001      	movs	r0, #1
 800299c:	f7ff fcd6 	bl	800234c <SEGGER_RTT_WriteSkipNoLock>
 80029a0:	4603      	mov	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <_SendPacket+0x19c>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	60d3      	str	r3, [r2, #12]
 80029b0:	e00b      	b.n	80029ca <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <_SendPacket+0x19c>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <_SendPacket+0x19c>)
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e004      	b.n	80029ca <_SendPacket+0x16a>
    goto SendDone;
 80029c0:	bf00      	nop
 80029c2:	e002      	b.n	80029ca <_SendPacket+0x16a>
      goto SendDone;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <_SendPacket+0x16a>
      goto SendDone;
 80029c8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <_SendPacket+0x1a4>)
 80029cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <_SendPacket+0x1a4>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d00b      	beq.n	80029f2 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <_SendPacket+0x19c>)
 80029dc:	789b      	ldrb	r3, [r3, #2]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <_SendPacket+0x19c>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80029e8:	f7ff fe6d 	bl	80026c6 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <_SendPacket+0x19c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20017218 	.word	0x20017218
 8002a00:	e0001004 	.word	0xe0001004
 8002a04:	2001732c 	.word	0x2001732c

08002a08 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a1e:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <SEGGER_SYSVIEW_Init+0x68>)
 8002a20:	4914      	ldr	r1, [pc, #80]	; (8002a74 <SEGGER_SYSVIEW_Init+0x6c>)
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7ff fd22 	bl	800246c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <SEGGER_SYSVIEW_Init+0x70>)
 8002a30:	4910      	ldr	r1, [pc, #64]	; (8002a74 <SEGGER_SYSVIEW_Init+0x6c>)
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7ff fd84 	bl	8002540 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <SEGGER_SYSVIEW_Init+0x78>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a46:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002a48:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002a4e:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002a54:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <SEGGER_SYSVIEW_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20013210 	.word	0x20013210
 8002a74:	08003854 	.word	0x08003854
 8002a78:	20017210 	.word	0x20017210
 8002a7c:	20017218 	.word	0x20017218
 8002a80:	e0001004 	.word	0xe0001004

08002a84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6113      	str	r3, [r2, #16]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20017218 	.word	0x20017218

08002aa4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002aac:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab0:	f04f 0120 	mov.w	r1, #32
 8002ab4:	f381 8811 	msr	BASEPRI, r1
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4808      	ldr	r0, [pc, #32]	; (8002adc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002abc:	f7ff fdf7 	bl	80026ae <_PreparePacket>
 8002ac0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68b8      	ldr	r0, [r7, #8]
 8002ac8:	f7ff feca 	bl	8002860 <_SendPacket>
  RECORD_END();
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f383 8811 	msr	BASEPRI, r3
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20017248 	.word	0x20017248

08002ae0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002aea:	f3ef 8311 	mrs	r3, BASEPRI
 8002aee:	f04f 0120 	mov.w	r1, #32
 8002af2:	f381 8811 	msr	BASEPRI, r1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	4816      	ldr	r0, [pc, #88]	; (8002b54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002afa:	f7ff fdd8 	bl	80026ae <_PreparePacket>
 8002afe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e00b      	b.n	8002b26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	61f9      	str	r1, [r7, #28]
 8002b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	09db      	lsrs	r3, r3, #7
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b7f      	cmp	r3, #127	; 0x7f
 8002b2a:	d8f0      	bhi.n	8002b0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	61fa      	str	r2, [r7, #28]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f7ff fe8d 	bl	8002860 <_SendPacket>
  RECORD_END();
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f383 8811 	msr	BASEPRI, r3
}
 8002b4c:	bf00      	nop
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20017248 	.word	0x20017248

08002b58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b64:	f3ef 8311 	mrs	r3, BASEPRI
 8002b68:	f04f 0120 	mov.w	r1, #32
 8002b6c:	f381 8811 	msr	BASEPRI, r1
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	4825      	ldr	r0, [pc, #148]	; (8002c08 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002b74:	f7ff fd9b 	bl	80026ae <_PreparePacket>
 8002b78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b86:	e00b      	b.n	8002ba0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	09db      	lsrs	r3, r3, #7
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ba4:	d8f0      	bhi.n	8002b88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	e00b      	b.n	8002bd8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	6279      	str	r1, [r7, #36]	; 0x24
 8002bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	09db      	lsrs	r3, r3, #7
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	2b7f      	cmp	r3, #127	; 0x7f
 8002bdc:	d8f0      	bhi.n	8002bc0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	627a      	str	r2, [r7, #36]	; 0x24
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	6979      	ldr	r1, [r7, #20]
 8002bf2:	69b8      	ldr	r0, [r7, #24]
 8002bf4:	f7ff fe34 	bl	8002860 <_SendPacket>
  RECORD_END();
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f383 8811 	msr	BASEPRI, r3
}
 8002bfe:	bf00      	nop
 8002c00:	3730      	adds	r7, #48	; 0x30
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20017248 	.word	0x20017248

08002c0c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002c12:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 80aa 	bne.w	8002d70 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002c1c:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002c22:	f3ef 8311 	mrs	r3, BASEPRI
 8002c26:	f04f 0120 	mov.w	r1, #32
 8002c2a:	f381 8811 	msr	BASEPRI, r1
 8002c2e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002c30:	220a      	movs	r2, #10
 8002c32:	4952      	ldr	r1, [pc, #328]	; (8002d7c <SEGGER_SYSVIEW_Start+0x170>)
 8002c34:	2001      	movs	r0, #1
 8002c36:	f7ff fb89 	bl	800234c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002c40:	200a      	movs	r0, #10
 8002c42:	f7ff ff2f 	bl	8002aa4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c46:	f3ef 8311 	mrs	r3, BASEPRI
 8002c4a:	f04f 0120 	mov.w	r1, #32
 8002c4e:	f381 8811 	msr	BASEPRI, r1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	484a      	ldr	r0, [pc, #296]	; (8002d80 <SEGGER_SYSVIEW_Start+0x174>)
 8002c56:	f7ff fd2a 	bl	80026ae <_PreparePacket>
 8002c5a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c64:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	e00b      	b.n	8002c84 <SEGGER_SYSVIEW_Start+0x78>
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	1c59      	adds	r1, r3, #1
 8002c74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	09db      	lsrs	r3, r3, #7
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2b7f      	cmp	r3, #127	; 0x7f
 8002c88:	d8f0      	bhi.n	8002c6c <SEGGER_SYSVIEW_Start+0x60>
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	e00b      	b.n	8002cbe <SEGGER_SYSVIEW_Start+0xb2>
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	6279      	str	r1, [r7, #36]	; 0x24
 8002cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	09db      	lsrs	r3, r3, #7
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc2:	d8f0      	bhi.n	8002ca6 <SEGGER_SYSVIEW_Start+0x9a>
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8002cca:	6a3a      	ldr	r2, [r7, #32]
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	e00b      	b.n	8002cf8 <SEGGER_SYSVIEW_Start+0xec>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	61f9      	str	r1, [r7, #28]
 8002cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	09db      	lsrs	r3, r3, #7
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8002cfc:	d8f0      	bhi.n	8002ce0 <SEGGER_SYSVIEW_Start+0xd4>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	2302      	movs	r3, #2
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	e00b      	b.n	8002d30 <SEGGER_SYSVIEW_Start+0x124>
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	6179      	str	r1, [r7, #20]
 8002d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	09db      	lsrs	r3, r3, #7
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b7f      	cmp	r3, #127	; 0x7f
 8002d34:	d8f0      	bhi.n	8002d18 <SEGGER_SYSVIEW_Start+0x10c>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	617a      	str	r2, [r7, #20]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002d46:	2218      	movs	r2, #24
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fd88 	bl	8002860 <_SendPacket>
      RECORD_END();
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SEGGER_SYSVIEW_Start+0x16c>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002d64:	f000 f9ec 	bl	8003140 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002d68:	f000 f9b2 	bl	80030d0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002d6c:	f000 fc18 	bl	80035a0 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002d70:	bf00      	nop
 8002d72:	3730      	adds	r7, #48	; 0x30
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20017218 	.word	0x20017218
 8002d7c:	08003874 	.word	0x08003874
 8002d80:	20017248 	.word	0x20017248

08002d84 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d8e:	f04f 0120 	mov.w	r1, #32
 8002d92:	f381 8811 	msr	BASEPRI, r1
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <SEGGER_SYSVIEW_Stop+0x44>)
 8002d9a:	f7ff fc88 	bl	80026ae <_PreparePacket>
 8002d9e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <SEGGER_SYSVIEW_Stop+0x48>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002da8:	220b      	movs	r2, #11
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	6838      	ldr	r0, [r7, #0]
 8002dae:	f7ff fd57 	bl	8002860 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <SEGGER_SYSVIEW_Stop+0x48>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f383 8811 	msr	BASEPRI, r3
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20017248 	.word	0x20017248
 8002dcc:	20017218 	.word	0x20017218

08002dd0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dda:	f04f 0120 	mov.w	r1, #32
 8002dde:	f381 8811 	msr	BASEPRI, r1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	4845      	ldr	r0, [pc, #276]	; (8002efc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002de6:	f7ff fc62 	bl	80026ae <_PreparePacket>
 8002dea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfa:	e00b      	b.n	8002e14 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	09db      	lsrs	r3, r3, #7
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	2b7f      	cmp	r3, #127	; 0x7f
 8002e18:	d8f0      	bhi.n	8002dfc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	e00b      	b.n	8002e4e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1c59      	adds	r1, r3, #1
 8002e3e:	6279      	str	r1, [r7, #36]	; 0x24
 8002e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	09db      	lsrs	r3, r3, #7
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2b7f      	cmp	r3, #127	; 0x7f
 8002e52:	d8f0      	bhi.n	8002e36 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	627a      	str	r2, [r7, #36]	; 0x24
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e00b      	b.n	8002e88 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	61f9      	str	r1, [r7, #28]
 8002e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	09db      	lsrs	r3, r3, #7
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e8c:	d8f0      	bhi.n	8002e70 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	61fa      	str	r2, [r7, #28]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e00b      	b.n	8002ec0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1c59      	adds	r1, r3, #1
 8002eb0:	6179      	str	r1, [r7, #20]
 8002eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	09db      	lsrs	r3, r3, #7
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec4:	d8f0      	bhi.n	8002ea8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	617a      	str	r2, [r7, #20]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002ed6:	2218      	movs	r2, #24
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68b8      	ldr	r0, [r7, #8]
 8002edc:	f7ff fcc0 	bl	8002860 <_SendPacket>
  RECORD_END();
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	4798      	blx	r3
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3730      	adds	r7, #48	; 0x30
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20017248 	.word	0x20017248
 8002f00:	20017218 	.word	0x20017218

08002f04 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b092      	sub	sp, #72	; 0x48
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8002f10:	f04f 0120 	mov.w	r1, #32
 8002f14:	f381 8811 	msr	BASEPRI, r1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	486b      	ldr	r0, [pc, #428]	; (80030c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002f1c:	f7ff fbc7 	bl	80026ae <_PreparePacket>
 8002f20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
 8002f38:	e00b      	b.n	8002f52 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	6479      	str	r1, [r7, #68]	; 0x44
 8002f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4e:	09db      	lsrs	r3, r3, #7
 8002f50:	643b      	str	r3, [r7, #64]	; 0x40
 8002f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f54:	2b7f      	cmp	r3, #127	; 0x7f
 8002f56:	d8f0      	bhi.n	8002f3a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	647a      	str	r2, [r7, #68]	; 0x44
 8002f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f72:	e00b      	b.n	8002f8c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	09db      	lsrs	r3, r3, #7
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f90:	d8f0      	bhi.n	8002f74 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa0:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	4619      	mov	r1, r3
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff fb32 	bl	8002614 <_EncodeStr>
 8002fb0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002fb2:	2209      	movs	r2, #9
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	6938      	ldr	r0, [r7, #16]
 8002fb8:	f7ff fc52 	bl	8002860 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b40      	ldr	r3, [pc, #256]	; (80030cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd2:	e00b      	b.n	8002fec <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	6379      	str	r1, [r7, #52]	; 0x34
 8002fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	09db      	lsrs	r3, r3, #7
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff0:	d8f0      	bhi.n	8002fd4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
 800300c:	e00b      	b.n	8003026 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	b2da      	uxtb	r2, r3
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	1c59      	adds	r1, r3, #1
 8003016:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	09db      	lsrs	r3, r3, #7
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	2b7f      	cmp	r3, #127	; 0x7f
 800302a:	d8f0      	bhi.n	800300e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	e00b      	b.n	8003060 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	6279      	str	r1, [r7, #36]	; 0x24
 8003052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	09db      	lsrs	r3, r3, #7
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2b7f      	cmp	r3, #127	; 0x7f
 8003064:	d8f0      	bhi.n	8003048 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	627a      	str	r2, [r7, #36]	; 0x24
 800306c:	6a3a      	ldr	r2, [r7, #32]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e00b      	b.n	8003098 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	1c59      	adds	r1, r3, #1
 8003088:	61f9      	str	r1, [r7, #28]
 800308a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	09db      	lsrs	r3, r3, #7
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b7f      	cmp	r3, #127	; 0x7f
 800309c:	d8f0      	bhi.n	8003080 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	61fa      	str	r2, [r7, #28]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80030ae:	2215      	movs	r2, #21
 80030b0:	68f9      	ldr	r1, [r7, #12]
 80030b2:	6938      	ldr	r0, [r7, #16]
 80030b4:	f7ff fbd4 	bl	8002860 <_SendPacket>
  RECORD_END();
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f383 8811 	msr	BASEPRI, r3
}
 80030be:	bf00      	nop
 80030c0:	3748      	adds	r7, #72	; 0x48
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20017248 	.word	0x20017248
 80030cc:	20017218 	.word	0x20017218

080030d0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80030e6:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4798      	blx	r3
  }
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20017218 	.word	0x20017218

080030f8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003100:	f3ef 8311 	mrs	r3, BASEPRI
 8003104:	f04f 0120 	mov.w	r1, #32
 8003108:	f381 8811 	msr	BASEPRI, r1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	480b      	ldr	r0, [pc, #44]	; (800313c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003110:	f7ff facd 	bl	80026ae <_PreparePacket>
 8003114:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6938      	ldr	r0, [r7, #16]
 800311c:	f7ff fa7a 	bl	8002614 <_EncodeStr>
 8003120:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003122:	220e      	movs	r2, #14
 8003124:	68f9      	ldr	r1, [r7, #12]
 8003126:	6938      	ldr	r0, [r7, #16]
 8003128:	f7ff fb9a 	bl	8002860 <_SendPacket>
  RECORD_END();
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f383 8811 	msr	BASEPRI, r3
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20017248 	.word	0x20017248

08003140 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d019      	beq.n	8003182 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d014      	beq.n	8003182 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4798      	blx	r3
 8003160:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003164:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003166:	e9d7 1200 	ldrd	r1, r2, [r7]
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	f04f 0400 	mov.w	r4, #0
 8003172:	0013      	movs	r3, r2
 8003174:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003176:	461a      	mov	r2, r3
 8003178:	4601      	mov	r1, r0
 800317a:	200d      	movs	r0, #13
 800317c:	f7ff fcec 	bl	8002b58 <SEGGER_SYSVIEW_RecordU32x2>
 8003180:	e005      	b.n	800318e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	200c      	movs	r0, #12
 800318a:	f7ff fca9 	bl	8002ae0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	bf00      	nop
 8003198:	20017218 	.word	0x20017218
 800319c:	e0001004 	.word	0xe0001004

080031a0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80031a6:	f3ef 8311 	mrs	r3, BASEPRI
 80031aa:	f04f 0120 	mov.w	r1, #32
 80031ae:	f381 8811 	msr	BASEPRI, r1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	4819      	ldr	r0, [pc, #100]	; (800321c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80031b6:	f7ff fa7a 	bl	80026ae <_PreparePacket>
 80031ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e00b      	b.n	80031ec <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	6179      	str	r1, [r7, #20]
 80031de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	09db      	lsrs	r3, r3, #7
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b7f      	cmp	r3, #127	; 0x7f
 80031f0:	d8f0      	bhi.n	80031d4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	617a      	str	r2, [r7, #20]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003202:	2202      	movs	r2, #2
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68b8      	ldr	r0, [r7, #8]
 8003208:	f7ff fb2a 	bl	8002860 <_SendPacket>
  RECORD_END();
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f383 8811 	msr	BASEPRI, r3
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20017248 	.word	0x20017248
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800322a:	f3ef 8311 	mrs	r3, BASEPRI
 800322e:	f04f 0120 	mov.w	r1, #32
 8003232:	f381 8811 	msr	BASEPRI, r1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	4807      	ldr	r0, [pc, #28]	; (8003258 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800323a:	f7ff fa38 	bl	80026ae <_PreparePacket>
 800323e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003240:	2203      	movs	r2, #3
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f7ff fb0b 	bl	8002860 <_SendPacket>
  RECORD_END();
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f383 8811 	msr	BASEPRI, r3
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20017248 	.word	0x20017248

0800325c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003262:	f3ef 8311 	mrs	r3, BASEPRI
 8003266:	f04f 0120 	mov.w	r1, #32
 800326a:	f381 8811 	msr	BASEPRI, r1
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	4807      	ldr	r0, [pc, #28]	; (8003290 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003272:	f7ff fa1c 	bl	80026ae <_PreparePacket>
 8003276:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003278:	2212      	movs	r2, #18
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	6838      	ldr	r0, [r7, #0]
 800327e:	f7ff faef 	bl	8002860 <_SendPacket>
  RECORD_END();
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f383 8811 	msr	BASEPRI, r3
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20017248 	.word	0x20017248

08003294 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800329a:	f3ef 8311 	mrs	r3, BASEPRI
 800329e:	f04f 0120 	mov.w	r1, #32
 80032a2:	f381 8811 	msr	BASEPRI, r1
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	4807      	ldr	r0, [pc, #28]	; (80032c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80032aa:	f7ff fa00 	bl	80026ae <_PreparePacket>
 80032ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80032b0:	2211      	movs	r2, #17
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f7ff fad3 	bl	8002860 <_SendPacket>
  RECORD_END();
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f383 8811 	msr	BASEPRI, r3
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20017248 	.word	0x20017248

080032cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80032d4:	f3ef 8311 	mrs	r3, BASEPRI
 80032d8:	f04f 0120 	mov.w	r1, #32
 80032dc:	f381 8811 	msr	BASEPRI, r1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	481a      	ldr	r0, [pc, #104]	; (800334c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80032e4:	f7ff f9e3 	bl	80026ae <_PreparePacket>
 80032e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e00b      	b.n	800331c <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	1c59      	adds	r1, r3, #1
 800330c:	61f9      	str	r1, [r7, #28]
 800330e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	09db      	lsrs	r3, r3, #7
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b7f      	cmp	r3, #127	; 0x7f
 8003320:	d8f0      	bhi.n	8003304 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	61fa      	str	r2, [r7, #28]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003332:	2208      	movs	r2, #8
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	6938      	ldr	r0, [r7, #16]
 8003338:	f7ff fa92 	bl	8002860 <_SendPacket>
  RECORD_END();
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f383 8811 	msr	BASEPRI, r3
}
 8003342:	bf00      	nop
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20017248 	.word	0x20017248
 8003350:	20017218 	.word	0x20017218

08003354 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800335c:	f3ef 8311 	mrs	r3, BASEPRI
 8003360:	f04f 0120 	mov.w	r1, #32
 8003364:	f381 8811 	msr	BASEPRI, r1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	481a      	ldr	r0, [pc, #104]	; (80033d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800336c:	f7ff f99f 	bl	80026ae <_PreparePacket>
 8003370:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	e00b      	b.n	80033a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	61f9      	str	r1, [r7, #28]
 8003396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	09db      	lsrs	r3, r3, #7
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b7f      	cmp	r3, #127	; 0x7f
 80033a8:	d8f0      	bhi.n	800338c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	61fa      	str	r2, [r7, #28]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80033ba:	2204      	movs	r2, #4
 80033bc:	68f9      	ldr	r1, [r7, #12]
 80033be:	6938      	ldr	r0, [r7, #16]
 80033c0:	f7ff fa4e 	bl	8002860 <_SendPacket>
  RECORD_END();
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f383 8811 	msr	BASEPRI, r3
}
 80033ca:	bf00      	nop
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20017248 	.word	0x20017248
 80033d8:	20017218 	.word	0x20017218

080033dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80033e4:	f3ef 8311 	mrs	r3, BASEPRI
 80033e8:	f04f 0120 	mov.w	r1, #32
 80033ec:	f381 8811 	msr	BASEPRI, r1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	481a      	ldr	r0, [pc, #104]	; (800345c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80033f4:	f7ff f95b 	bl	80026ae <_PreparePacket>
 80033f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80033fe:	4b18      	ldr	r3, [pc, #96]	; (8003460 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e00b      	b.n	800342c <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	61f9      	str	r1, [r7, #28]
 800341e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	09db      	lsrs	r3, r3, #7
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b7f      	cmp	r3, #127	; 0x7f
 8003430:	d8f0      	bhi.n	8003414 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	61fa      	str	r2, [r7, #28]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003442:	2206      	movs	r2, #6
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	6938      	ldr	r0, [r7, #16]
 8003448:	f7ff fa0a 	bl	8002860 <_SendPacket>
  RECORD_END();
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f383 8811 	msr	BASEPRI, r3
}
 8003452:	bf00      	nop
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20017248 	.word	0x20017248
 8003460:	20017218 	.word	0x20017218

08003464 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	; 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06d      	beq.n	8003552 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800347c:	2300      	movs	r3, #0
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003480:	e008      	b.n	8003494 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	3301      	adds	r3, #1
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003498:	429a      	cmp	r2, r3
 800349a:	d3f2      	bcc.n	8003482 <SEGGER_SYSVIEW_SendModule+0x1e>
 800349c:	e000      	b.n	80034a0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800349e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d055      	beq.n	8003552 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034a6:	f3ef 8311 	mrs	r3, BASEPRI
 80034aa:	f04f 0120 	mov.w	r1, #32
 80034ae:	f381 8811 	msr	BASEPRI, r1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	482a      	ldr	r0, [pc, #168]	; (8003560 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80034b6:	f7ff f8fa 	bl	80026ae <_PreparePacket>
 80034ba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	e00b      	b.n	80034e2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1c59      	adds	r1, r3, #1
 80034d2:	6279      	str	r1, [r7, #36]	; 0x24
 80034d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	09db      	lsrs	r3, r3, #7
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	2b7f      	cmp	r3, #127	; 0x7f
 80034e6:	d8f0      	bhi.n	80034ca <SEGGER_SYSVIEW_SendModule+0x66>
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	627a      	str	r2, [r7, #36]	; 0x24
 80034ee:	6a3a      	ldr	r2, [r7, #32]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e00b      	b.n	800351c <SEGGER_SYSVIEW_SendModule+0xb8>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	1c59      	adds	r1, r3, #1
 800350c:	61f9      	str	r1, [r7, #28]
 800350e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	09db      	lsrs	r3, r3, #7
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b7f      	cmp	r3, #127	; 0x7f
 8003520:	d8f0      	bhi.n	8003504 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	61fa      	str	r2, [r7, #28]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	4619      	mov	r1, r3
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff f86a 	bl	8002614 <_EncodeStr>
 8003540:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003542:	2216      	movs	r2, #22
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	6938      	ldr	r0, [r7, #16]
 8003548:	f7ff f98a 	bl	8002860 <_SendPacket>
      RECORD_END();
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003552:	bf00      	nop
 8003554:	3730      	adds	r7, #48	; 0x30
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20017240 	.word	0x20017240
 8003560:	20017248 	.word	0x20017248

08003564 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00f      	beq.n	8003592 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f2      	bne.n	8003578 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20017240 	.word	0x20017240

080035a0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80035a6:	f3ef 8311 	mrs	r3, BASEPRI
 80035aa:	f04f 0120 	mov.w	r1, #32
 80035ae:	f381 8811 	msr	BASEPRI, r1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	4817      	ldr	r0, [pc, #92]	; (8003614 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80035b6:	f7ff f87a 	bl	80026ae <_PreparePacket>
 80035ba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e00b      	b.n	80035e4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	6179      	str	r1, [r7, #20]
 80035d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	09db      	lsrs	r3, r3, #7
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b7f      	cmp	r3, #127	; 0x7f
 80035e8:	d8f0      	bhi.n	80035cc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	617a      	str	r2, [r7, #20]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80035fa:	221b      	movs	r2, #27
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f7ff f92e 	bl	8002860 <_SendPacket>
  RECORD_END();
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f383 8811 	msr	BASEPRI, r3
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20017248 	.word	0x20017248
 8003618:	20017244 	.word	0x20017244

0800361c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003624:	f3ef 8311 	mrs	r3, BASEPRI
 8003628:	f04f 0120 	mov.w	r1, #32
 800362c:	f381 8811 	msr	BASEPRI, r1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	4827      	ldr	r0, [pc, #156]	; (80036d0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003634:	f7ff f83b 	bl	80026ae <_PreparePacket>
 8003638:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	6938      	ldr	r0, [r7, #16]
 8003640:	f7fe ffe8 	bl	8002614 <_EncodeStr>
 8003644:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	2301      	movs	r3, #1
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	e00b      	b.n	8003668 <SEGGER_SYSVIEW_Warn+0x4c>
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	6279      	str	r1, [r7, #36]	; 0x24
 800365a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	09db      	lsrs	r3, r3, #7
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b7f      	cmp	r3, #127	; 0x7f
 800366c:	d8f0      	bhi.n	8003650 <SEGGER_SYSVIEW_Warn+0x34>
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	627a      	str	r2, [r7, #36]	; 0x24
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e00b      	b.n	80036a0 <SEGGER_SYSVIEW_Warn+0x84>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	61f9      	str	r1, [r7, #28]
 8003692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	09db      	lsrs	r3, r3, #7
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b7f      	cmp	r3, #127	; 0x7f
 80036a4:	d8f0      	bhi.n	8003688 <SEGGER_SYSVIEW_Warn+0x6c>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	61fa      	str	r2, [r7, #28]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80036b6:	221a      	movs	r2, #26
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	6938      	ldr	r0, [r7, #16]
 80036bc:	f7ff f8d0 	bl	8002860 <_SendPacket>
  RECORD_END();
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f383 8811 	msr	BASEPRI, r3
}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20017248 	.word	0x20017248

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	4e0d      	ldr	r6, [pc, #52]	; (800370c <__libc_init_array+0x38>)
 80036d8:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <__libc_init_array+0x3c>)
 80036da:	1ba4      	subs	r4, r4, r6
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	2500      	movs	r5, #0
 80036e0:	42a5      	cmp	r5, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	4e0b      	ldr	r6, [pc, #44]	; (8003714 <__libc_init_array+0x40>)
 80036e6:	4c0c      	ldr	r4, [pc, #48]	; (8003718 <__libc_init_array+0x44>)
 80036e8:	f000 f83a 	bl	8003760 <_init>
 80036ec:	1ba4      	subs	r4, r4, r6
 80036ee:	10a4      	asrs	r4, r4, #2
 80036f0:	2500      	movs	r5, #0
 80036f2:	42a5      	cmp	r5, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fc:	4798      	blx	r3
 80036fe:	3501      	adds	r5, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003706:	4798      	blx	r3
 8003708:	3501      	adds	r5, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08003880 	.word	0x08003880
 8003710:	08003880 	.word	0x08003880
 8003714:	08003880 	.word	0x08003880
 8003718:	08003884 	.word	0x08003884

0800371c <memcmp>:
 800371c:	b530      	push	{r4, r5, lr}
 800371e:	2400      	movs	r4, #0
 8003720:	42a2      	cmp	r2, r4
 8003722:	d101      	bne.n	8003728 <memcmp+0xc>
 8003724:	2000      	movs	r0, #0
 8003726:	e007      	b.n	8003738 <memcmp+0x1c>
 8003728:	5d03      	ldrb	r3, [r0, r4]
 800372a:	3401      	adds	r4, #1
 800372c:	190d      	adds	r5, r1, r4
 800372e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003732:	42ab      	cmp	r3, r5
 8003734:	d0f4      	beq.n	8003720 <memcmp+0x4>
 8003736:	1b58      	subs	r0, r3, r5
 8003738:	bd30      	pop	{r4, r5, pc}

0800373a <memcpy>:
 800373a:	b510      	push	{r4, lr}
 800373c:	1e43      	subs	r3, r0, #1
 800373e:	440a      	add	r2, r1
 8003740:	4291      	cmp	r1, r2
 8003742:	d100      	bne.n	8003746 <memcpy+0xc>
 8003744:	bd10      	pop	{r4, pc}
 8003746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800374a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800374e:	e7f7      	b.n	8003740 <memcpy+0x6>

08003750 <memset>:
 8003750:	4402      	add	r2, r0
 8003752:	4603      	mov	r3, r0
 8003754:	4293      	cmp	r3, r2
 8003756:	d100      	bne.n	800375a <memset+0xa>
 8003758:	4770      	bx	lr
 800375a:	f803 1b01 	strb.w	r1, [r3], #1
 800375e:	e7f9      	b.n	8003754 <memset+0x4>

08003760 <_init>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr

0800376c <_fini>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr
